{"remainingRequest":"/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/node_modules/babel-loader/lib/index.js!/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/src/components/TrackAnalysis.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/src/components/TrackAnalysis.vue","mtime":1572016026299},{"path":"/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/andrew/Documents/Github/Spotify-Features/spotify-features-website/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'TrackAnalysis',\n  props: {\n    trackData: Object\n  },\n  data: function data() {\n    return {\n      length: 300,\n      background: 25,\n      barColors: [{\n        red: 242,\n        green: 142,\n        blue: 43\n      }, {\n        red: 89,\n        green: 161,\n        blue: 79\n      }, {\n        red: 78,\n        green: 121,\n        blue: 167\n      }, {\n        red: 225,\n        green: 87,\n        blue: 89\n      }, {\n        red: 74,\n        green: 189,\n        blue: 180\n      }, {\n        red: 237,\n        green: 201,\n        blue: 72\n      }, {\n        red: 255,\n        green: 157,\n        blue: 167\n      }, {\n        red: 176,\n        green: 122,\n        blue: 161\n      }, {\n        red: 156,\n        green: 117,\n        blue: 95\n      }, {\n        red: 180,\n        green: 189,\n        blue: 74\n      }],\n      artist: null,\n      artistDone: false,\n      audioAnalysisReady: false,\n      audioAnalysisSegments: 80,\n      percentileData: {\n        valence: 0,\n        danceability: 0,\n        energy: 0\n      },\n      percentileDataReady: false\n    };\n  },\n  methods: {\n    libraryAnalysis: function libraryAnalysis() {\n      this.$router.push('/libraryanalysis');\n    },\n    findArtistSongsSaved: function findArtistSongsSaved(artist) {\n      if (\"artists\" in this.libraryData) if (artist in this.libraryData.artists) return this.libraryData.artists[artist].num;\n      return \"0\";\n    },\n    time: function time(seconds) {\n      var zero = \"\";\n\n      if (seconds % 60 < 10) {\n        zero = \"0\";\n      }\n\n      if (seconds < 60) {\n        return \"0:\" + zero + seconds;\n      }\n\n      return Math.floor(seconds / 60) + \":\" + zero + seconds % 60;\n    },\n    mode: function mode(val) {\n      if (val) return \"Major\";\n      return \"Minor\";\n    },\n    keyTell: function keyTell(val) {\n      var keys = [\"C\", \"C#/Db\", \"D\", \"D#/Eb\", \"E\", \"F\", \"F#/Gb\", \"G\", \"G#/Ab\", \"A\", \"A#/Bb\", \"B\"];\n      if (val == -1) return \"Not Found\";\n      return keys[val % 12];\n    },\n    percent: function percent(value) {\n      return Math.round(value * 100) + \"%\";\n    },\n    getArtistDetails: function () {\n      var _getArtistDetails = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$store.dispatch('getArtist', this.trackData.artists[0].id);\n\n              case 2:\n                this.artist = _context.sent;\n                this.artistDone = true;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getArtistDetails() {\n        return _getArtistDetails.apply(this, arguments);\n      }\n\n      return getArtistDetails;\n    }(),\n    cleanAudioAnalysis: function cleanAudioAnalysis() {\n      var newSegments = [];\n      if (this.trackData.audioAnalysis.segments.length < this.audioAnalysisSegments) this.audioAnalysisSegments = this.trackData.audioAnalysis.segments.length;\n      var width = Math.round(this.trackData.audioAnalysis.segments.length / this.audioAnalysisSegments);\n\n      for (var i = 0; i < this.audioAnalysisSegments; i++) {\n        var itemIndex = Math.round(width * i);\n\n        if (itemIndex > this.trackData.audioAnalysis.segments.length - 1) {\n          itemIndex = this.trackData.audioAnalysis.segments.length - 2;\n        }\n\n        var sum = 0;\n\n        for (var j = 0; j < this.trackData.audioAnalysis.segments[itemIndex].pitches.length; j++) {\n          sum += this.trackData.audioAnalysis.segments[itemIndex].pitches[j];\n        }\n\n        var averagePitch = sum / this.trackData.audioAnalysis.segments[itemIndex].pitches.length;\n        var color = this.HSVtoRGB(((1 - averagePitch) * 229 + -50) / 360, .51, .89);\n        var loudness = Math.round((this.trackData.audioAnalysis.segments[itemIndex].loudness_max / 60 + 1) * 100) / 100;\n        newSegments.push({\n          start: Math.round(this.trackData.audioAnalysis.segments[itemIndex].start),\n          loudness_max: loudness,\n          red: color.r,\n          green: color.g,\n          blue: color.b\n        });\n      }\n\n      this.trackData.audioAnalysis.segments = null;\n      this.trackData.audioAnalysis.segments = newSegments;\n      this.audioAnalysisReady = true;\n    },\n    HSVtoRGB: function HSVtoRGB(h, s, v) {\n      var r, g, b, i, f, p, q, t;\n\n      if (arguments.length === 1) {\n        s = h.s, v = h.v, h = h.h;\n      }\n\n      i = Math.floor(h * 6);\n      f = h * 6 - i;\n      p = v * (1 - s);\n      q = v * (1 - f * s);\n      t = v * (1 - (1 - f) * s);\n\n      switch (i % 6) {\n        case 0:\n          r = v, g = t, b = p;\n          break;\n\n        case 1:\n          r = q, g = v, b = p;\n          break;\n\n        case 2:\n          r = p, g = v, b = t;\n          break;\n\n        case 3:\n          r = p, g = q, b = v;\n          break;\n\n        case 4:\n          r = t, g = p, b = v;\n          break;\n\n        case 5:\n          r = v, g = p, b = q;\n          break;\n      }\n\n      return {\n        r: Math.round(r * 255),\n        g: Math.round(g * 255),\n        b: Math.round(b * 255)\n      };\n    },\n    calculatePercentiles: function calculatePercentiles() {\n      var keys = Object.keys(this.percentileData);\n\n      for (var i = 0; i < keys.length; i++) {\n        var less = 0;\n\n        for (var j = 0; j < this.libraryData.tracks.length; j++) {\n          if (this.libraryData.tracks[j][keys[i]] < this.trackData.audioFeatures[keys[i]]) less += 1;\n        }\n\n        this.percentileData[keys[i]] = less / this.libraryData.tracks.length;\n      }\n\n      this.percentileDataReady = true;\n    }\n  },\n  computed: {\n    banger: function banger() {\n      return (this.trackData.audioFeatures.tempo - 96 + this.trackData.audioFeatures.energy * 100 + this.trackData.audioFeatures.danceability * 50) / 210;\n    },\n    bangerConclusion: function bangerConclusion() {\n      var results = [\"Banger? More like Bummer\", \"Nah Bruh\", \"Not Banger.\", \"Cool, but not Banger\", \"Like Sorta Banger?\", \"Got A Semi-Banger\", \"Almost Banger\", \"What a Banger!\", \"Absolute Banger Bro\", \"Banger of all Bangers\"];\n      if (Math.floor(this.banger * 10) < results.length) return results[Math.floor(this.banger * 10)];\n      return \"Banger of all Bangers\";\n    },\n    audioFeaturesDone: function audioFeaturesDone() {\n      return this.$store.state.libraryData.complete.audioFeaturesDone;\n    },\n    libraryData: function libraryData() {\n      return this.$store.state.libraryData;\n    }\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this.getArtistDetails();\n              _context2.next = 3;\n              return this.$store.dispatch('getAudioAnalysisForTrack', this.trackData.id);\n\n            case 3:\n              this.trackData.audioAnalysis = _context2.sent;\n              this.cleanAudioAnalysis();\n              this.calculatePercentiles();\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }()\n};",{"version":3,"sources":["TrackAnalysis.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"TrackAnalysis\">\n\n        <div id=\"analysis\">\n            <div id=\"song\" class=\"window flex\" :style=\"{'--delay': 0}\">\n                <div class=\"col\">\n                    <div id=\"track-image\" :style=\"{backgroundImage: 'url(\\'' + trackData.album.images[0].url + '\\')'}\"/>\n                </div>\n                <div class=\"col fit\">\n                    <h1>{{trackData.name}}</h1>\n                    <div id=\"artists\">\n                        <h3 v-for=\"artist in trackData.artists\" :key=\"artist.name\">{{artist.name}}</h3>\n                    </div>\n                    <h2>{{trackData.album.name}}</h2>\n                </div>\n            </div>\n            <div id=\"artist\" class=\"window\" :style=\"{'--delay': 1}\">\n                <div v-if=\"artistDone\" class=\"flex\">\n                    <div class=\"col\">\n                        <div id=\"track-image\" :style=\"{backgroundImage: 'url(\\'' + artist.images[0].url + '\\')'}\"/>\n                    </div>\n                    <div class=\"col fit\">\n                        <h1>{{artist.name}}</h1>\n                        <h2>{{artist.followers.total}} Followers</h2>\n                        <h2 v-if=\"libraryData != null\">{{findArtistSongsSaved(artist.name)}} Songs Saved</h2>\n                        <h2>{{artist.genres[0]}}</h2>\n                    </div>\n                </div>\n            </div>\n\n            <div id=\"characteristics\" class=\"window\" :style=\"{'--delay': 2}\">\n                <h3>Song Characteristics</h3>\n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Happiness</h4>\n                    <div class=\"stat-bar\">\n                        <div class=\"fill\" :style=\"{'--percent': + trackData.audioFeatures.valence, '--red': + barColors[0].red, '--green': + barColors[0].green, '--blue': + barColors[0].blue}\"/>\n                    </div>\n                    <h4 class=\"value\">{{percent(trackData.audioFeatures.valence)}}</h4>\n                </div>\n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Energy</h4>\n                    <div class=\"stat-bar\">\n                        <div class=\"fill\" :style=\"{'--percent': + trackData.audioFeatures.energy, '--red': + barColors[1].red, '--green': + barColors[1].green, '--blue': + barColors[1].blue}\"/>\n                    </div>\n                    <h4 class=\"value\">{{percent(trackData.audioFeatures.energy)}}</h4>\n                </div>\n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Danceability</h4>\n                    <div class=\"stat-bar\">\n                        <div class=\"fill\" :style=\"{'--percent': + trackData.audioFeatures.danceability, '--red': + barColors[2].red, '--green': + barColors[2].green, '--blue': + barColors[2].blue}\"/>\n                    </div>\n                    <h4 class=\"value\">{{percent(trackData.audioFeatures.danceability)}}</h4>\n                </div>\n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Popularity</h4>\n                    <div class=\"stat-bar\">\n                        <div class=\"fill\" :style=\"{'--percent': + (trackData.popularity / 100), '--red': + barColors[4].red, '--green': + barColors[4].green, '--blue': + barColors[4].blue}\"/>\n                    </div>\n                    <h4 class=\"value\">{{trackData.popularity}}%</h4>\n                </div>\n            </div>\n\n            <div id=\"stats\" class=\"window\" :style=\"{'--delay': 3}\">\n                <h3>Song Statistics</h3>\n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Tempo:</h4>\n                    <h4 class=\"value\">{{trackData.audioFeatures.tempo}} BPM</h4>\n                </div>\n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Key:</h4>\n                    <h4 class=\"value\">{{keyTell(trackData.audioFeatures.key)}}</h4>\n                </div>\n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Mode:</h4>\n                    <h4 class=\"value\">{{mode(trackData.audioFeatures.mode)}}</h4>\n                </div>\n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Duration:</h4>\n                    <h4 class=\"value\">{{Math.round(trackData.audioFeatures.duration_ms / 6000) / 10}} min</h4>\n                </div>\n            </div>\n\n            <div id=\"banger\" class=\"window\" :style=\"{'--delay': 4}\">\n                <h3>Is This a Banger?</h3>  \n                <div class=\"row stat\">\n                    <h4 class=\"bar-title\">Banger-Level</h4>\n                    <div class=\"stat-bar\">\n                        <div class=\"fill\" :style=\"{'--percent': + banger, '--red': + barColors[3].red, '--green': + barColors[3].green, '--blue': + barColors[3].blue}\"/>\n                    </div>\n                    <h4 class=\"value\">{{Math.round(banger * 100)}}%</h4>\n                </div>\n                <h3 id=\"banger-conclusion\">{{bangerConclusion}}</h3>\n            </div>\n\n            <div id=\"banger\" class=\"window\"  :style=\"{'--delay': 5}\">\n                <h3 class=\"nomargin\">Audio Analysis</h3>  \n                <div class=\"loading\" v-if=\"!audioAnalysisReady\">\n                    <div v-for=\"bar in 4\" :key=\"'loadingbar'+bar\" class=\"bar\" :style=\"{'--delay': + (bar - 1)}\"/>\n                </div>\n                <div v-if=\"audioAnalysisReady\" class=\"graph\" :style=\"{'--numBars': + audioAnalysisSegments}\">\n                    <div class=\"graph-bar\" v-for=\"(bar, index) in trackData.audioAnalysis.segments\" :style=\"{'--height': + bar.loudness_max, '--red': + bar.red, '--green': + bar.green, '--blue': + bar.blue,}\" :key=\"'audio-analysis'+index\">\n                        <p>{{time(bar.start)}}</p>\n                    </div>\n                </div>\n                <p v-if=\"audioAnalysisReady\" class=\"graph-key\">Height: Volume - Color: Pitch</p>\n            </div>\n\n            <div v-if=\"audioFeaturesDone\" id=\"comparisons\" class=\"window\" :style=\"{'--delay': 6}\">\n                <h3>Compaired to Your Saved (Percentile)</h3>\n                <div v-if=\"percentileDataReady\" class=\"row stat\">\n                    <h4 class=\"bar-title\">Happier Than</h4>\n                    <div class=\"stat-bar\">\n                        <div class=\"fill\" :style=\"{'--percent': + percentileData.valence, '--red': + barColors[0].red + 20, '--green': + barColors[0].green + 20, '--blue': + barColors[0].blue + 20}\"/>\n                        <div class=\"fill excess\" :style=\"{'--percent': + 1 - percentileData.valence, '--red': + barColors[0].red - 20, '--green': + barColors[0].green - 20, '--blue': + barColors[0].blue - 20}\"/>\n                    </div>\n                    <h4 class=\"value\">{{percent(percentileData.valence)}}</h4>\n                </div>\n                <div v-if=\"percentileDataReady\" class=\"row stat\">\n                    <h4 class=\"bar-title\">Energy</h4>\n                    <div class=\"stat-bar\">\n                        <div class=\"fill\" :style=\"{'--percent': + percentileData.energy, '--red': + barColors[1].red + 20, '--green': + barColors[1].green + 20, '--blue': + barColors[1].blue + 20}\"/>\n                        <div class=\"fill excess\" :style=\"{'--percent': + 1 - percentileData.energy, '--red': + barColors[1].red - 20, '--green': + barColors[1].green - 20, '--blue': + barColors[1].blue - 20}\"/>\n                    </div>\n                    <h4 class=\"value\">{{percent(percentileData.energy)}}</h4>\n                </div>\n                 <div v-if=\"percentileDataReady\" class=\"row stat\">\n                    <h4 class=\"bar-title\">Danceable</h4>\n                    <div class=\"stat-bar\">\n                        <div class=\"fill\" :style=\"{'--percent': + percentileData.danceability, '--red': + barColors[2].red + 20, '--green': + barColors[2].green + 20, '--blue': + barColors[2].blue + 20}\"/>\n                        <div class=\"fill excess\" :style=\"{'--percent': + 1 - percentileData.danceability, '--red': + barColors[2].red - 20, '--green': + barColors[2].green - 20, '--blue': + barColors[2].blue - 20}\"/>\n                    </div>\n                    <h4 class=\"value\">{{percent(percentileData.danceability)}}</h4>\n                </div>\n            </div>\n            <h1 id=\"instructions\" @click=\"libraryAnalysis\" :style=\"{'--delay': 7}\" v-if=\"!audioFeaturesDone\">Run Library Analysis for Personalized Data</h1>\n      </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'TrackAnalysis',\n    props: {\n        trackData: Object,\n    },\n    data() {\n        return {\n            length: 300,\n            background: 25,\n            barColors: [\n                {red: 242, green: 142, blue: 43},\n                {red: 89, green: 161, blue: 79},\n                {red: 78, green: 121, blue: 167},\n                {red: 225, green: 87, blue: 89},\n                {red: 74, green: 189, blue: 180},\n                {red: 237, green: 201, blue: 72},\n                {red: 255, green: 157, blue: 167},\n                {red: 176, green: 122, blue: 161},\n                {red: 156, green: 117, blue: 95},\n                {red: 180, green: 189, blue: 74},\n            ],\n            artist: null,\n            artistDone: false,\n            audioAnalysisReady: false,\n            audioAnalysisSegments: 80,\n            percentileData: {\n                valence: 0,\n                danceability: 0,\n                energy: 0,\n            },\n            percentileDataReady: false,\n        }\n    },\n    methods: {\n        libraryAnalysis() {\n            this.$router.push('/libraryanalysis');\n        },\n        findArtistSongsSaved(artist) {\n            if (\"artists\" in this.libraryData)\n                if (artist in this.libraryData.artists)\n                    return this.libraryData.artists[artist].num;\n            return \"0\";\n        },\n        time(seconds) {\n            let zero = \"\";\n            if (seconds % 60 < 10)\n            {\n                zero = \"0\";\n            }\n            if (seconds < 60)\n            {\n                return \"0:\" + zero + seconds;\n            }\n            return Math.floor(seconds / 60) + \":\" + zero + (seconds % 60);\n        },\n        mode(val) {\n            if (val)\n                return \"Major\";\n            return \"Minor\";\n        \n        },\n        keyTell(val) {\n            let keys = [\"C\", \"C#/Db\", \"D\", \"D#/Eb\", \"E\", \"F\", \"F#/Gb\", \"G\", \"G#/Ab\", \"A\", \"A#/Bb\", \"B\"];\n            if (val == -1)\n                return \"Not Found\";\n            return keys[val % 12];\n        },\n        percent(value) {\n            return Math.round(value * 100) + \"%\";\n        },\n        async getArtistDetails() {\n            this.artist = await this.$store.dispatch('getArtist', this.trackData.artists[0].id);\n            this.artistDone = true;\n        },\n        cleanAudioAnalysis() {\n            let newSegments = [];\n            if (this.trackData.audioAnalysis.segments.length < this.audioAnalysisSegments)\n                this.audioAnalysisSegments = this.trackData.audioAnalysis.segments.length;\n            let width = Math.round(this.trackData.audioAnalysis.segments.length / this.audioAnalysisSegments);\n            \n            for (var i = 0; i < this.audioAnalysisSegments; i++)\n            {\n                let itemIndex = Math.round(width * i);\n                if (itemIndex > this.trackData.audioAnalysis.segments.length - 1)\n                {\n                    itemIndex = this.trackData.audioAnalysis.segments.length - 2;\n                }\n                let sum = 0;\n                for (var j = 0; j < this.trackData.audioAnalysis.segments[itemIndex].pitches.length; j++)\n                {\n                    sum += this.trackData.audioAnalysis.segments[itemIndex].pitches[j];\n                }\n                let averagePitch = sum / this.trackData.audioAnalysis.segments[itemIndex].pitches.length;\n                let color = this.HSVtoRGB(((1 - averagePitch) *229 + -50) / 360,.51,.89);\n                let loudness = (Math.round(((this.trackData.audioAnalysis.segments[itemIndex].loudness_max / 60) + 1) * 100) / 100);\n\n                newSegments.push({\n                    start: Math.round(this.trackData.audioAnalysis.segments[itemIndex].start),\n                    loudness_max: loudness, \n                    red: color.r,\n                    green: color.g,\n                    blue: color.b,\n                });\n            }\n            this.trackData.audioAnalysis.segments = null;\n            this.trackData.audioAnalysis.segments = newSegments;\n            this.audioAnalysisReady = true;\n        },\n        HSVtoRGB(h, s, v) {\n            var r, g, b, i, f, p, q, t;\n            if (arguments.length === 1) {\n                s = h.s, v = h.v, h = h.h;\n            }\n            i = Math.floor(h * 6);\n            f = h * 6 - i;\n            p = v * (1 - s);\n            q = v * (1 - f * s);\n            t = v * (1 - (1 - f) * s);\n            switch (i % 6) {\n                case 0: r = v, g = t, b = p; break;\n                case 1: r = q, g = v, b = p; break;\n                case 2: r = p, g = v, b = t; break;\n                case 3: r = p, g = q, b = v; break;\n                case 4: r = t, g = p, b = v; break;\n                case 5: r = v, g = p, b = q; break;\n            }\n            return {\n                r: Math.round(r * 255),\n                g: Math.round(g * 255),\n                b: Math.round(b * 255)\n            };\n        },\n        calculatePercentiles() {\n            let keys = Object.keys(this.percentileData);\n            for (var i = 0; i < keys.length; i++)\n            {\n                let less = 0;\n                for (var j = 0; j < this.libraryData.tracks.length; j++)\n                {\n                    if (this.libraryData.tracks[j][keys[i]] < this.trackData.audioFeatures[keys[i]])\n                        less += 1;\n                }\n                this.percentileData[keys[i]] = less / this.libraryData.tracks.length;\n            }\n            this.percentileDataReady = true;\n        },\n    },\n    computed: {\n        banger() {\n            return (this.trackData.audioFeatures.tempo - 96 + (this.trackData.audioFeatures.energy*100) + (this.trackData.audioFeatures.danceability * 50)) / 210;\n        },\n        bangerConclusion() {\n            let results = [\"Banger? More like Bummer\", \"Nah Bruh\", \"Not Banger.\", \"Cool, but not Banger\", \"Like Sorta Banger?\", \"Got A Semi-Banger\", \"Almost Banger\", \"What a Banger!\", \"Absolute Banger Bro\", \"Banger of all Bangers\"];\n            if (Math.floor(this.banger * 10) < results.length)\n                return results[Math.floor(this.banger * 10)];\n            return \"Banger of all Bangers\";\n        },\n        audioFeaturesDone() {\n            return this.$store.state.libraryData.complete.audioFeaturesDone;\n        },\n        libraryData() {\n            return this.$store.state.libraryData;\n        }\n    },\n    async created() {\n        this.getArtistDetails();\n        this.trackData.audioAnalysis = await this.$store.dispatch('getAudioAnalysisForTrack', this.trackData.id);\n        this.cleanAudioAnalysis();\n        this.calculatePercentiles();\n    }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#instructions {\n    --delay: 0;\n    cursor: pointer;\n    animation: slide-up .5s ease calc(var(--delay) * .1s), peekaboo calc(var(--delay) * .1s);\n    display: block;\n    width: 400px;\n    height: 80px;\n    padding-top: 68px;\n    text-overflow: clip;\n    line-height: 40px;\n    color: rgba(255, 255, 255, 0.219);\n    text-align: center;\n    overflow: hidden;\n    white-space:normal;\n}\n.loading {\n  margin-top: 30px;\n}\n\n.graph-key {\n    position: absolute;\n    width: calc(100% - 40px);\n    bottom: 10px;\n    text-align: center;\n    font-size: .8em;\n    color:rgba(255, 255, 255, 0.267);\n}\n#banger-conclusion {\n    margin: 0 auto;\n    text-align: center;\n    color: rgb(252, 140, 142);\n    font-size: 3em;\n}\n#track-image {\n    display: block;\n    width: 100px;\n    height: 100px;\n    background-size: 100% auto;\n    background-position: center center;\n    margin-right: 20px;\n}\n\n@keyframes slide-up {\n  from {\n    transform: translateY(100px);\n    opacity: 0;\n  }\n}\n\n.nomargin {\n    margin: 0 !important;\n}\n\n.graph {\n    --numBars: 0;\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100%;\n    max-width: 400px;\n    height: 187px;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.graph-bar {\n    --height: 0;\n    --red: 240;\n    --green: 193;\n    --blue: 111;\n    display: block;\n    width: calc((100% / var(--numBars)) - 1px);\n    height: calc(125px * var(--height));\n    background-color: rgba(var(--red), var(--green), var(--blue), .9);\n    border-radius: 3px;\n    position: relative;\n}\n\n.graph-bar p {\n    display: none;\n    position: absolute;\n    font-size: 1em;\n    color: white;\n    text-align: center;\n    top: calc(((125px * var(--height)) / 2) + -80px);\n    transform: translateX(-15px);\n}\n\n.graph-bar:hover p {\n    display: block;\n}\n.fit {\n    width: calc(100% - 120px);\n}\n\n\n#analysis {\n    position: relative;\n    display: flex;\n    justify-content: space-around;\n    flex-wrap: wrap;\n    width: calc(100% - 64px);\n    margin: 32px;\n    animation: slide-up .5s ease;\n}\n\nh1 {\n    font-size: 1.4em;\n    color: white;\n    text-align: left;\n    margin: 0px 0px;\n    line-height: 30px;\n    display: block;\n    max-width: calc(100% - 5px);\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n}\n\nh2 {\n    font-size: 1em;\n    color: rgba(255, 255, 255, 0.568);\n    text-align: left;\n    margin: 0;\n    margin-top: 10px;\n    max-width: calc(100% - 5px);\n    text-transform: capitalize;\n        text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n#artists {\n    display: flex;\n    max-width: calc(100% - 5px);\n    overflow: hidden;\n}\n\n#artists h3 {\n    font-size: 1em;\n    color: rgba(255, 255, 255, 0.927);\n    text-align: left;\n    margin: 0px 0px;\n    margin-right: 5px;\n    margin-top: 10px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n.window h3 {\n  text-align: left;\n  animation: none;\n  font-size: 1.6em;\n  margin: 0;\n  color: white;\n  margin-bottom: 15px;\n}\n\nh4 {\n  color: white;\n  display: flex;\n  align-items: center;\n  margin: 0;\n  text-align: left;\n}\n\np {\n    margin: 0;\n    color: white;\n    text-align: left;\n}\n\n.window {\n  --delay: 0;\n  animation: slide-up .5s ease calc(var(--delay) * .1s), peekaboo calc(var(--delay) * .1s);\n  display: inline-block;\n  position: relative;\n  width: 75%;\n  margin: 20px 20px;\n  padding: 20px;\n  max-width: 400px;\n  border-radius: 5px;\n  margin-bottom: 20px;\n  background: rgba(255, 255, 255, 0.05);\n  border: 1px solid rgba(255, 255, 255, 0.247);\n}\n\n\n\n.flex {\n    display: flex;\n}\n\n.bar-title {\n  width: 115px;\n}\n\n.stat-bar {\n    display: flex;\n    border-radius: 5px;\n    overflow: hidden;\n    width: 200px;\n    max-height: 10px;\n    background-color: rgba(255, 255, 255, 0.247);\n}\n\n.stat-bar .fill {\n    --percent: 0;\n    --red: 255;\n    --green: 255;\n    --blue: 255;\n    display: block;\n    width: calc(var(--percent) * 100%);\n    height: 10px;\n    background: rgb(var(--red), var(--green), var(--blue));\n    animation: slow-fill 1s ease;\n}\n\n.stat-bar .fill.excess {\n    border-left: 2px solid rgb(37, 37, 37);\n    background: rgba(var(--red), var(--green), var(--blue), .5);\n    width: calc((var(--percent) * 100%) - 2px);\n    animation: border-throb 1s ease-in-out infinite;\n}\n\n@keyframes border-throb {\n    50% {\n        border-left: 2px solid rgb(255, 255, 255);\n    }\n}\n\n\n.stat {\n  margin-bottom: 15px;\n  justify-content: space-between;\n}\n\n@keyframes slow-fill {\n  from {\n    width: calc(var(--percent) * 0%);\n  }\n}\n\n.row {\n  display: flex;\n  align-items: center;\n}\n</style>"],"sourceRoot":"src/components"}]}
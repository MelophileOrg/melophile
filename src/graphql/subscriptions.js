/* eslint-disable */
// this is an auto generated file. This will be overwritten

export const onCreateUser = /* GraphQL */ `
  subscription OnCreateUser($owner: String!) {
    onCreateUser(owner: $owner) {
      id
      username
      spotifyID
      email
      tokens
      images
      following {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      followers {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      posts {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      public
      updated
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      genres
      playlists {
        id
        name
        description
        userID
        owner {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        images
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        _version
        _deleted
        _lastChangedAt
      }
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onUpdateUser = /* GraphQL */ `
  subscription OnUpdateUser($owner: String!) {
    onUpdateUser(owner: $owner) {
      id
      username
      spotifyID
      email
      tokens
      images
      following {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      followers {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      posts {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      public
      updated
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      genres
      playlists {
        id
        name
        description
        userID
        owner {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        images
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        _version
        _deleted
        _lastChangedAt
      }
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onDeleteUser = /* GraphQL */ `
  subscription OnDeleteUser($owner: String!) {
    onDeleteUser(owner: $owner) {
      id
      username
      spotifyID
      email
      tokens
      images
      following {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      followers {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      posts {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      public
      updated
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      genres
      playlists {
        id
        name
        description
        userID
        owner {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        images
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        _version
        _deleted
        _lastChangedAt
      }
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onCreatePost = /* GraphQL */ `
  subscription OnCreatePost($owner: String!) {
    onCreatePost(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      content
      entityType
      track {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      artist {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      album {
        id
        name
        genres
        images
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      playlist {
        id
        name
        description
        userID
        owner {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        images
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        _version
        _deleted
        _lastChangedAt
      }
      comments {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      likes {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        entityType
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        comment {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        emoji
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onUpdatePost = /* GraphQL */ `
  subscription OnUpdatePost($owner: String!) {
    onUpdatePost(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      content
      entityType
      track {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      artist {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      album {
        id
        name
        genres
        images
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      playlist {
        id
        name
        description
        userID
        owner {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        images
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        _version
        _deleted
        _lastChangedAt
      }
      comments {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      likes {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        entityType
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        comment {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        emoji
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onDeletePost = /* GraphQL */ `
  subscription OnDeletePost($owner: String!) {
    onDeletePost(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      content
      entityType
      track {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      artist {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      album {
        id
        name
        genres
        images
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      playlist {
        id
        name
        description
        userID
        owner {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        images
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        _version
        _deleted
        _lastChangedAt
      }
      comments {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      likes {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        entityType
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        comment {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        emoji
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onCreateComment = /* GraphQL */ `
  subscription OnCreateComment($owner: String!) {
    onCreateComment(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      post {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      content
      likes {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        entityType
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        comment {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        emoji
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onUpdateComment = /* GraphQL */ `
  subscription OnUpdateComment($owner: String!) {
    onUpdateComment(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      post {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      content
      likes {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        entityType
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        comment {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        emoji
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onDeleteComment = /* GraphQL */ `
  subscription OnDeleteComment($owner: String!) {
    onDeleteComment(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      post {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      content
      likes {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        entityType
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        comment {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        emoji
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onCreateLike = /* GraphQL */ `
  subscription OnCreateLike($owner: String!) {
    onCreateLike(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      entityType
      post {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      comment {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      emoji
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onUpdateLike = /* GraphQL */ `
  subscription OnUpdateLike($owner: String!) {
    onUpdateLike(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      entityType
      post {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      comment {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      emoji
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onDeleteLike = /* GraphQL */ `
  subscription OnDeleteLike($owner: String!) {
    onDeleteLike(owner: $owner) {
      id
      user {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      entityType
      post {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        entityType
        track {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artist {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        playlist {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        comments {
          id
          content
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      comment {
        id
        user {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        post {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        content
        likes {
          id
          entityType
          emoji
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        created
        _version
        _deleted
        _lastChangedAt
        owner
      }
      emoji
      created
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onCreateTrack = /* GraphQL */ `
  subscription OnCreateTrack($owner: String!) {
    onCreateTrack(owner: $owner) {
      id
      name
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      album {
        id
        name
        genres
        images
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      popularity
      key
      mode
      tempo
      valence
      danceability
      energy
      acousticness
      instrumentalness
      liveness
      loudness
      speechiness
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onUpdateTrack = /* GraphQL */ `
  subscription OnUpdateTrack($owner: String!) {
    onUpdateTrack(owner: $owner) {
      id
      name
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      album {
        id
        name
        genres
        images
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      popularity
      key
      mode
      tempo
      valence
      danceability
      energy
      acousticness
      instrumentalness
      liveness
      loudness
      speechiness
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onDeleteTrack = /* GraphQL */ `
  subscription OnDeleteTrack($owner: String!) {
    onDeleteTrack(owner: $owner) {
      id
      name
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      album {
        id
        name
        genres
        images
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      popularity
      key
      mode
      tempo
      valence
      danceability
      energy
      acousticness
      instrumentalness
      liveness
      loudness
      speechiness
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onCreateArtist = /* GraphQL */ `
  subscription OnCreateArtist($owner: String!) {
    onCreateArtist(owner: $owner) {
      id
      name
      images
      genres
      popularity
      followers
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onUpdateArtist = /* GraphQL */ `
  subscription OnUpdateArtist($owner: String!) {
    onUpdateArtist(owner: $owner) {
      id
      name
      images
      genres
      popularity
      followers
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onDeleteArtist = /* GraphQL */ `
  subscription OnDeleteArtist($owner: String!) {
    onDeleteArtist(owner: $owner) {
      id
      name
      images
      genres
      popularity
      followers
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onCreateAlbum = /* GraphQL */ `
  subscription OnCreateAlbum($owner: String!) {
    onCreateAlbum(owner: $owner) {
      id
      name
      genres
      images
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onUpdateAlbum = /* GraphQL */ `
  subscription OnUpdateAlbum($owner: String!) {
    onUpdateAlbum(owner: $owner) {
      id
      name
      genres
      images
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onDeleteAlbum = /* GraphQL */ `
  subscription OnDeleteAlbum($owner: String!) {
    onDeleteAlbum(owner: $owner) {
      id
      name
      genres
      images
      artists {
        id
        name
        images
        genres
        popularity
        followers
        _version
        _deleted
        _lastChangedAt
        owner
      }
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      _version
      _deleted
      _lastChangedAt
      owner
    }
  }
`;
export const onCreatePlaylist = /* GraphQL */ `
  subscription OnCreatePlaylist($owner: String!) {
    onCreatePlaylist(owner: $owner) {
      id
      name
      description
      userID
      owner {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      images
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      public
      _version
      _deleted
      _lastChangedAt
    }
  }
`;
export const onUpdatePlaylist = /* GraphQL */ `
  subscription OnUpdatePlaylist($owner: String!) {
    onUpdatePlaylist(owner: $owner) {
      id
      name
      description
      userID
      owner {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      images
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      public
      _version
      _deleted
      _lastChangedAt
    }
  }
`;
export const onDeletePlaylist = /* GraphQL */ `
  subscription OnDeletePlaylist($owner: String!) {
    onDeletePlaylist(owner: $owner) {
      id
      name
      description
      userID
      owner {
        id
        username
        spotifyID
        email
        tokens
        images
        following {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        followers {
          id
          username
          spotifyID
          email
          tokens
          images
          public
          updated
          genres
          _version
          _deleted
          _lastChangedAt
          owner
        }
        posts {
          id
          content
          entityType
          created
          _version
          _deleted
          _lastChangedAt
          owner
        }
        public
        updated
        tracks {
          id
          name
          popularity
          key
          mode
          tempo
          valence
          danceability
          energy
          acousticness
          instrumentalness
          liveness
          loudness
          speechiness
          _version
          _deleted
          _lastChangedAt
          owner
        }
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        genres
        playlists {
          id
          name
          description
          userID
          images
          public
          _version
          _deleted
          _lastChangedAt
        }
        _version
        _deleted
        _lastChangedAt
        owner
      }
      images
      tracks {
        id
        name
        artists {
          id
          name
          images
          genres
          popularity
          followers
          _version
          _deleted
          _lastChangedAt
          owner
        }
        album {
          id
          name
          genres
          images
          _version
          _deleted
          _lastChangedAt
          owner
        }
        popularity
        key
        mode
        tempo
        valence
        danceability
        energy
        acousticness
        instrumentalness
        liveness
        loudness
        speechiness
        _version
        _deleted
        _lastChangedAt
        owner
      }
      public
      _version
      _deleted
      _lastChangedAt
    }
  }
`;

{"remainingRequest":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/babel-loader/lib/index.js!/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/src/components/General/ScrollingText.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/src/components/General/ScrollingText.vue","mtime":1572458373915},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdzY3JvbGxpbmd0ZXh0JywKICBwcm9wczogewogICAgdGV4dDogU3RyaW5nLAogICAgZm9udFNpemU6IE51bWJlciwKICAgIGZvbnRXZWlnaHQ6IFN0cmluZywKICAgIHJlZDogTnVtYmVyLAogICAgYmx1ZTogTnVtYmVyLAogICAgZ3JlZW46IE51bWJlciwKICAgIGFscGhhOiBOdW1iZXIKICB9Cn07"},{"version":3,"sources":["ScrollingText.vue"],"names":[],"mappings":";;;;;;;;AAQA,eAAA;AACA,EAAA,IAAA,EAAA,eADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,IAAA,EAAA,MADA;AAEA,IAAA,QAAA,EAAA,MAFA;AAGA,IAAA,UAAA,EAAA,MAHA;AAIA,IAAA,GAAA,EAAA,MAJA;AAKA,IAAA,IAAA,EAAA,MALA;AAMA,IAAA,KAAA,EAAA,MANA;AAOA,IAAA,KAAA,EAAA;AAPA;AAFA,CAAA","sourcesContent":["<template>\n  <div class=\"scrollingtext\" :style=\"{'--fontSize': + fontSize, '--fontWeight': + fontWeight, '--red': + red, '--blue': + blue, '--green': + green, '--alpha': + alpha}\">\n    <p>{{text}}</p>\n    <p class=\"second\">{{text}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'scrollingtext',\n  props: {\n    text: String,\n    fontSize: Number,\n    fontWeight: String,\n    red: Number,\n    blue: Number,\n    green: Number,\n    alpha: Number,\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.scrollingtext {\n  --fontSize: 16;\n  --fontWeight: \"bolder\";\n  --red: 255;\n  --green: 255;\n  --blue: 255;\n  --alpha: 1;\n  display: block;\n  width: 100%;\n  height: calc(var(--fontSize) * 1px);\n  position: relative;\n}\n\np {\n  position: absolute;\n  left: 0;\n  top: 0;\n  text-align: left;\n  color: rgb(var(--red), var(--green), var(--blue), var(--alpha));\n  font-size: calc(var(--fontSize) * 1px);\n  font-weight: var(--fontWeight);\n  text-overflow:unset;\n  margin: 0;\n}\n\n.scrollingtext:hover p {\n  animation: scroll 10s linear 0s infinite;\n}\n\n.scrollingtext p.second {\n  display: none;\n}\n\n.scrollingtext:hover p.second {\n  display: inline-block;\n  animation: scroll 10s linear -5s infinite;\n}\n\n@keyframes scroll {\n  0% {\n    opacity: 1;\n    transform: translateX(0%);\n  }\n  50% {\n    opacity: 0;\n    transform: translateX(-110%);\n  }\n  50.00000001% {\n    opacity: 0;\n    transform: translateX(110%);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0%);\n  } \n}\n</style>"],"sourceRoot":"src/components/General"}]}
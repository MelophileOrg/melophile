{"remainingRequest":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/src/components/Library/TopPlayed.vue?vue&type=style&index=0&id=a05293d8&scoped=true&lang=css&","dependencies":[{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/src/components/Library/TopPlayed.vue","mtime":1573230899903},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrew/Documents/Github/Spotify-Features/my-music-taste/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouVG9wUGxheWVkIHsKICAgIG1hcmdpbi1ib3R0b206IDc1cHg7Cn0KCi5saXN0IHsKICAgIG1hcmdpbi10b3A6IDM1cHg7Cn0KCkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNTAwcHgpIHsKICAgIC5saXN0IHsKICAgICAgICBtYXJnaW4tdG9wOiAxMHB4OwogICAgfQoKICAgIC5Ub3BQbGF5ZWQgewogICAgICAgIG1hcmdpbi1ib3R0b206IDBweCAhaW1wb3J0YW50OwogICAgfQp9Cgouc2VhcmNoSXRlbSB7CiAgICBtYXgtd2lkdGg6IDkwMHB4OwogICAgCiAgICBtYXJnaW46IDAgYXV0bzsKfQoKLmZhZGUgewogIG9wYWNpdHk6IC4zOwp9Cg=="},{"version":3,"sources":["TopPlayed.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA","file":"TopPlayed.vue","sourceRoot":"src/components/Library","sourcesContent":["<template>\n    <div class=\"TopPlayed\">\n        <div v-if=\"progress.extremesLoaded || profile\">\n        <Selector @toggleSave=\"toggleSave2\" :save=\"save\" :state=\"giveState\" :items=\"filterSelector\" :load=\"false\" :override=\"false\" @pending=\"pending\" @selection=\"select\"/>\n        <div class=\"list\" v-if=\"list.length > 0 && !save\">\n            <SearchItem :profile=\"profile\" :profileData=\"profileData\" :topsaved=\"false\" class=\"searchItem\" v-for=\"(track, index) in list\"  :saved=\"true\" :showNum=\"true\" :key=\"'topplayed' + index\" :data=\"track\" :index=\"index\" :type=\"type\"/>\n        </div>\n        <Empty class=\"list\" v-if=\"list.length <= 0 && !save\"/>\n        <div class=\"list\" v-if=\"list.length > 0 && save\" :class=\"{fade: (type == 'artist' && !stateartists) || (type == 'track' && !statetracks)}\">\n            <SearchItem :profile=\"profile\" :profileData=\"profileData\" :topsaved=\"false\" class=\"searchItem\" v-for=\"index in 20\"  :saved=\"true\" :showNum=\"true\" :key=\"'topplayed' + (index - 1)\" :data=\"list[index - 1]\" :index=\"index - 1\" :type=\"type\"/>\n        </div>\n        <Empty class=\"list\" v-if=\"list.length <= 0 && save\"/>\n        </div>\n        <Loading v-else/>\n    </div>\n</template>\n\n<script>\nimport Selector from '@/components/Library/Selector.vue'\nimport SearchItem from '@/components/Library/SearchItem.vue'\nimport Empty from '@/components/Library/Empty.vue'\nimport Loading from '@/components/General/Loading.vue'\n\nexport default {\n  name: 'TopPlayed',\n  props: {\n      save: Boolean,\n      statetracks: Boolean,\n      stateartists: Boolean,\n      profile: Boolean,\n      data: Object,\n      artistsAllowed: Boolean,\n      tracksAllowed: Boolean,\n  },\n  components: {\n      Selector,\n      SearchItem,\n      Empty,\n      Loading\n  },\n  data() {\n    return {\n        list: [],\n        type: \"track\",\n        selector: [\n            {type: \"text\", text: \"My Top Played\"}, \n            {\n                type: \"select\", \n                options: [\n                    {value: \"tracks\", text: \"Tracks\"},\n                    {value: \"artists\", text: \"Artists\"}\n                ]\n            },\n            {type: \"text\", text: \"in the last\"}, \n            {\n                type: \"select\", \n                options: [\n                    {value: 0, text: \"4 Weeks\"},\n                    {value: 1, text: \"6 Months\"},\n                    {value: 2, text: \"Few years\"},\n                ]\n            }\n        ],\n        chart: \"\",\n        range: -1,\n        pendingStatus: true,\n    }\n  },\n    methods: {\n        toggleSave2() {\n            this.$emit('toggleSave', \"most_played_\" + this.type + \"s\");\n        },\n        select(val) {\n            if (val == 'tracks' || val == 'artists') {\n                this.chart = val;\n                if (val == 'tracks')\n                    this.type = \"track\";\n                else \n                    this.type = \"artist\";\n            }\n            else \n                this.range = val;\n            this.checkResults();\n        },\n        checkResults() {\n            if (this.chart != \"\" && (this.range == 0 || this.range == 1 || this.range == 2)) {\n                let ids = this.topPlayed[this.chart][this.range];\n                for (var i = 0; i < ids.length; i++) {\n                    if (!this.profile)\n                        this.list.push(this.$store.state[this.chart][ids[i]]);\n                    else  {\n                        let track = this.data[this.chart][ids[i]];\n                        track.id = ids[i];\n                        this.list.push(track);\n                    }\n                }\n                this.pendingStatus = false;\n            }\n        },\n        pending() {\n            this.pendingStatus = true;\n            this.list = [];\n        },\n        filter() {\n            if (!this.data.artistsAllowed) {\n                this.selector.splice(0, 2, {type: \"text\", text: this.data.name + \"'s Top Played Tracks\"});\n            }\n            else if (!this.data.tracksAllowed) {\n                this.selector.splice(0, 2, {type: \"text\", text: this.data.name + \"'s Top Played Artists\"});\n            }\n            else {\n                this.selector.splice(0, 1, {type: \"text\", text: this.data.name + \"'s Top Played\"})\n            }\n        }\n    },\n    computed: {\n        giveState() {\n            if (this.type == 'artist')\n                return this.stateartists;\n            return this.statetracks;\n        },\n        topPlayed() {\n            if (!this.profile)\n                return this.$store.state.topPlayed;\n            return this.data.topPlayed;\n        },\n        progress() {\n            return this.$store.state.progress;\n        },\n        filterSelector() {\n            if (!this.profile)\n                return this.selector;\n            this.filter();\n            return this.selector;\n        },\n        profileData() {\n            if (!this.profile)\n                return null;\n            return {tracks: this.data.tracks, artists: this.data.artists};\n        }\n    }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.TopPlayed {\n    margin-bottom: 75px;\n}\n\n.list {\n    margin-top: 35px;\n}\n\n@media only screen and (max-width: 500px) {\n    .list {\n        margin-top: 10px;\n    }\n\n    .TopPlayed {\n        margin-bottom: 0px !important;\n    }\n}\n\n.searchItem {\n    max-width: 900px;\n    \n    margin: 0 auto;\n}\n\n.fade {\n  opacity: .3;\n}\n</style>\n"]}]}
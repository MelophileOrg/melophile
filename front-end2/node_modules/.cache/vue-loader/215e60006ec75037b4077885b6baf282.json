{"remainingRequest":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\spotify-features-website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\spotify-features-website\\src\\components\\TrackAnalysis.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\spotify-features-website\\src\\components\\TrackAnalysis.vue","mtime":1571953443776},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\spotify-features-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\spotify-features-website\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\spotify-features-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\spotify-features-website\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n    name: 'TrackAnalysis',\r\n    props: {\r\n        trackData: Object,\r\n    },\r\n    data() {\r\n        return {\r\n            length: 300,\r\n            background: 25,\r\n            barColors: [\r\n                {red: 242, green: 142, blue: 43},\r\n                {red: 89, green: 161, blue: 79},\r\n                {red: 78, green: 121, blue: 167},\r\n                {red: 225, green: 87, blue: 89},\r\n                {red: 74, green: 189, blue: 180},\r\n                {red: 237, green: 201, blue: 72},\r\n                {red: 255, green: 157, blue: 167},\r\n                {red: 176, green: 122, blue: 161},\r\n                {red: 156, green: 117, blue: 95},\r\n                {red: 180, green: 189, blue: 74},\r\n            ],\r\n            artist: null,\r\n            artistDone: false,\r\n            audioAnalysisReady: false,\r\n            audioAnalysisSegments: 80,\r\n            percentileData: {\r\n                valence: 0,\r\n                danceability: 0,\r\n                energy: 0,\r\n            },\r\n            percentileDataReady: false,\r\n        }\r\n    },\r\n    methods: {\r\n        libraryAnalysis() {\r\n            this.$router.push('/libraryanalysis');\r\n        },\r\n        findArtistSongsSaved(artist) {\r\n            if (\"artists\" in this.libraryData)\r\n                if (artist in this.libraryData.artists)\r\n                    return this.libraryData.artists[artist].num;\r\n            return \"0\";\r\n        },\r\n        time(seconds) {\r\n            let zero = \"\";\r\n            if (seconds % 60 < 10)\r\n            {\r\n                zero = \"0\";\r\n            }\r\n            if (seconds < 60)\r\n            {\r\n                return \"0:\" + zero + seconds;\r\n            }\r\n            return Math.floor(seconds / 60) + \":\" + zero + (seconds % 60);\r\n        },\r\n        mode(val) {\r\n            if (val)\r\n                return \"Major\";\r\n            return \"Minor\";\r\n        \r\n        },\r\n        keyTell(val) {\r\n            let keys = [\"C\", \"C#/Db\", \"D\", \"D#/Eb\", \"E\", \"F\", \"F#/Gb\", \"G\", \"G#/Ab\", \"A\", \"A#/Bb\", \"B\"];\r\n            if (val == -1)\r\n                return \"Not Found\";\r\n            return keys[val % 12];\r\n        },\r\n        percent(value) {\r\n            return Math.round(value * 100) + \"%\";\r\n        },\r\n        async getArtistDetails() {\r\n            this.artist = await this.$store.dispatch('getArtist', this.trackData.artists[0].id);\r\n            this.artistDone = true;\r\n        },\r\n        cleanAudioAnalysis() {\r\n            let newSegments = [];\r\n            if (this.trackData.audioAnalysis.segments.length < this.audioAnalysisSegments)\r\n                this.audioAnalysisSegments = this.trackData.audioAnalysis.segments.length;\r\n            let width = Math.round(this.trackData.audioAnalysis.segments.length / this.audioAnalysisSegments);\r\n            \r\n            for (var i = 0; i < this.audioAnalysisSegments; i++)\r\n            {\r\n                let itemIndex = Math.round(width * i);\r\n                if (itemIndex > this.trackData.audioAnalysis.segments.length - 1)\r\n                {\r\n                    itemIndex = this.trackData.audioAnalysis.segments.length - 2;\r\n                }\r\n                let sum = 0;\r\n                for (var j = 0; j < this.trackData.audioAnalysis.segments[itemIndex].pitches.length; j++)\r\n                {\r\n                    sum += this.trackData.audioAnalysis.segments[itemIndex].pitches[j];\r\n                }\r\n                let averagePitch = sum / this.trackData.audioAnalysis.segments[itemIndex].pitches.length;\r\n                let color = this.HSVtoRGB(((1 - averagePitch) *229 + -50) / 360,.51,.89);\r\n                let loudness = (Math.round(((this.trackData.audioAnalysis.segments[itemIndex].loudness_max / 60) + 1) * 100) / 100);\r\n\r\n                newSegments.push({\r\n                    start: Math.round(this.trackData.audioAnalysis.segments[itemIndex].start),\r\n                    loudness_max: loudness, \r\n                    red: color.r,\r\n                    green: color.g,\r\n                    blue: color.b,\r\n                });\r\n            }\r\n            this.trackData.audioAnalysis.segments = null;\r\n            this.trackData.audioAnalysis.segments = newSegments;\r\n            this.audioAnalysisReady = true;\r\n        },\r\n        HSVtoRGB(h, s, v) {\r\n            var r, g, b, i, f, p, q, t;\r\n            if (arguments.length === 1) {\r\n                s = h.s, v = h.v, h = h.h;\r\n            }\r\n            i = Math.floor(h * 6);\r\n            f = h * 6 - i;\r\n            p = v * (1 - s);\r\n            q = v * (1 - f * s);\r\n            t = v * (1 - (1 - f) * s);\r\n            switch (i % 6) {\r\n                case 0: r = v, g = t, b = p; break;\r\n                case 1: r = q, g = v, b = p; break;\r\n                case 2: r = p, g = v, b = t; break;\r\n                case 3: r = p, g = q, b = v; break;\r\n                case 4: r = t, g = p, b = v; break;\r\n                case 5: r = v, g = p, b = q; break;\r\n            }\r\n            return {\r\n                r: Math.round(r * 255),\r\n                g: Math.round(g * 255),\r\n                b: Math.round(b * 255)\r\n            };\r\n        },\r\n        calculatePercentiles() {\r\n            let keys = Object.keys(this.percentileData);\r\n            for (var i = 0; i < keys.length; i++)\r\n            {\r\n                let less = 0;\r\n                for (var j = 0; j < this.libraryData.tracks.length; j++)\r\n                {\r\n                    if (this.libraryData.tracks[j][keys[i]] < this.trackData.audioFeatures[keys[i]])\r\n                        less += 1;\r\n                }\r\n                this.percentileData[keys[i]] = less / this.libraryData.tracks.length;\r\n            }\r\n            this.percentileDataReady = true;\r\n        },\r\n    },\r\n    computed: {\r\n        banger() {\r\n            return (this.trackData.audioFeatures.tempo - 96 + (this.trackData.audioFeatures.energy*100) + (this.trackData.audioFeatures.danceability * 50)) / 210;\r\n        },\r\n        bangerConclusion() {\r\n            let results = [\"Banger? More like Bummer\", \"Nah Bruh\", \"Not Banger.\", \"Cool, but not Banger\", \"Like Sorta Banger?\", \"Got A Semi-Banger\", \"Almost Banger\", \"What a Banger!\", \"Absolute Banger Bro\", \"Banger of all Bangers\"];\r\n            if (Math.floor(this.banger * 10) < results.length)\r\n                return results[Math.floor(this.banger * 10)];\r\n            return \"Banger of all Bangers\";\r\n        },\r\n        audioFeaturesDone() {\r\n            return this.$store.state.libraryData.complete.audioFeaturesDone;\r\n        },\r\n        libraryData() {\r\n            return this.$store.state.libraryData;\r\n        }\r\n    },\r\n    async created() {\r\n        this.getArtistDetails();\r\n        this.trackData.audioAnalysis = await this.$store.dispatch('getAudioAnalysisForTrack', this.trackData.id);\r\n        this.cleanAudioAnalysis();\r\n        this.calculatePercentiles();\r\n    }\r\n}\r\n",{"version":3,"sources":["TrackAnalysis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TrackAnalysis.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"TrackAnalysis\">\r\n\r\n        <div id=\"analysis\">\r\n            <div id=\"song\" class=\"window flex\" :style=\"{'--delay': 0}\">\r\n                <div class=\"col\">\r\n                    <div id=\"track-image\" :style=\"{backgroundImage: 'url(\\'' + trackData.album.images[0].url + '\\')'}\"/>\r\n                </div>\r\n                <div class=\"col fit\">\r\n                    <h1>{{trackData.name}}</h1>\r\n                    <div id=\"artists\">\r\n                        <h3 v-for=\"artist in trackData.artists\" :key=\"artist.name\">{{artist.name}}</h3>\r\n                    </div>\r\n                    <h2>{{trackData.album.name}}</h2>\r\n                </div>\r\n            </div>\r\n            <div id=\"artist\" class=\"window\" :style=\"{'--delay': 1}\">\r\n                <div v-if=\"artistDone\" class=\"flex\">\r\n                    <div class=\"col\">\r\n                        <div id=\"track-image\" :style=\"{backgroundImage: 'url(\\'' + artist.images[0].url + '\\')'}\"/>\r\n                    </div>\r\n                    <div class=\"col fit\">\r\n                        <h1>{{artist.name}}</h1>\r\n                        <h2>{{artist.followers.total}} Followers</h2>\r\n                        <h2 v-if=\"libraryData != null\">{{findArtistSongsSaved(artist.name)}} Songs Saved</h2>\r\n                        <h2>{{artist.genres[0]}}</h2>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"characteristics\" class=\"window\" :style=\"{'--delay': 2}\">\r\n                <h3>Song Characteristics</h3>\r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Happiness</h4>\r\n                    <div class=\"stat-bar\">\r\n                        <div class=\"fill\" :style=\"{'--percent': + trackData.audioFeatures.valence, '--red': + barColors[0].red, '--green': + barColors[0].green, '--blue': + barColors[0].blue}\"/>\r\n                    </div>\r\n                    <h4 class=\"value\">{{percent(trackData.audioFeatures.valence)}}</h4>\r\n                </div>\r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Energy</h4>\r\n                    <div class=\"stat-bar\">\r\n                        <div class=\"fill\" :style=\"{'--percent': + trackData.audioFeatures.energy, '--red': + barColors[1].red, '--green': + barColors[1].green, '--blue': + barColors[1].blue}\"/>\r\n                    </div>\r\n                    <h4 class=\"value\">{{percent(trackData.audioFeatures.energy)}}</h4>\r\n                </div>\r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Danceability</h4>\r\n                    <div class=\"stat-bar\">\r\n                        <div class=\"fill\" :style=\"{'--percent': + trackData.audioFeatures.danceability, '--red': + barColors[2].red, '--green': + barColors[2].green, '--blue': + barColors[2].blue}\"/>\r\n                    </div>\r\n                    <h4 class=\"value\">{{percent(trackData.audioFeatures.danceability)}}</h4>\r\n                </div>\r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Popularity</h4>\r\n                    <div class=\"stat-bar\">\r\n                        <div class=\"fill\" :style=\"{'--percent': + (trackData.popularity / 100), '--red': + barColors[4].red, '--green': + barColors[4].green, '--blue': + barColors[4].blue}\"/>\r\n                    </div>\r\n                    <h4 class=\"value\">{{trackData.popularity}}%</h4>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"stats\" class=\"window\" :style=\"{'--delay': 3}\">\r\n                <h3>Song Statistics</h3>\r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Tempo:</h4>\r\n                    <h4 class=\"value\">{{trackData.audioFeatures.tempo}} BPM</h4>\r\n                </div>\r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Key:</h4>\r\n                    <h4 class=\"value\">{{keyTell(trackData.audioFeatures.key)}}</h4>\r\n                </div>\r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Mode:</h4>\r\n                    <h4 class=\"value\">{{mode(trackData.audioFeatures.mode)}}</h4>\r\n                </div>\r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Duration:</h4>\r\n                    <h4 class=\"value\">{{Math.round(trackData.audioFeatures.duration_ms / 6000) / 10}} min</h4>\r\n                </div>\r\n            </div>\r\n\r\n            <div id=\"banger\" class=\"window\" :style=\"{'--delay': 4}\">\r\n                <h3>Is This a Banger?</h3>  \r\n                <div class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Banger-Level</h4>\r\n                    <div class=\"stat-bar\">\r\n                        <div class=\"fill\" :style=\"{'--percent': + banger, '--red': + barColors[3].red, '--green': + barColors[3].green, '--blue': + barColors[3].blue}\"/>\r\n                    </div>\r\n                    <h4 class=\"value\">{{Math.round(banger * 100)}}%</h4>\r\n                </div>\r\n                <h3 id=\"banger-conclusion\">{{bangerConclusion}}</h3>\r\n            </div>\r\n\r\n            <div id=\"banger\" class=\"window\"  :style=\"{'--delay': 5}\">\r\n                <h3 class=\"nomargin\">Audio Analysis</h3>  \r\n                <div class=\"loading\" v-if=\"!audioAnalysisReady\">\r\n                    <div v-for=\"bar in 4\" :key=\"'loadingbar'+bar\" class=\"bar\" :style=\"{'--delay': + (bar - 1)}\"/>\r\n                </div>\r\n                <div v-if=\"audioAnalysisReady\" class=\"graph\" :style=\"{'--numBars': + audioAnalysisSegments}\">\r\n                    <div class=\"graph-bar\" v-for=\"(bar, index) in trackData.audioAnalysis.segments\" :style=\"{'--height': + bar.loudness_max, '--red': + bar.red, '--green': + bar.green, '--blue': + bar.blue,}\" :key=\"'audio-analysis'+index\">\r\n                        <p>{{time(bar.start)}}</p>\r\n                    </div>\r\n                </div>\r\n                <p v-if=\"audioAnalysisReady\" class=\"graph-key\">Height: Volume - Color: Pitch</p>\r\n            </div>\r\n\r\n            <div v-if=\"audioFeaturesDone\" id=\"comparisons\" class=\"window\" :style=\"{'--delay': 6}\">\r\n                <h3>Compaired to Your Saved (Percentile)</h3>\r\n                <div v-if=\"percentileDataReady\" class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Happier Than</h4>\r\n                    <div class=\"stat-bar\">\r\n                        <div class=\"fill\" :style=\"{'--percent': + percentileData.valence, '--red': + barColors[0].red + 20, '--green': + barColors[0].green + 20, '--blue': + barColors[0].blue + 20}\"/>\r\n                        <div class=\"fill excess\" :style=\"{'--percent': + 1 - percentileData.valence, '--red': + barColors[0].red - 20, '--green': + barColors[0].green - 20, '--blue': + barColors[0].blue - 20}\"/>\r\n                    </div>\r\n                    <h4 class=\"value\">{{percent(percentileData.valence)}}</h4>\r\n                </div>\r\n                <div v-if=\"percentileDataReady\" class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Energy</h4>\r\n                    <div class=\"stat-bar\">\r\n                        <div class=\"fill\" :style=\"{'--percent': + percentileData.energy, '--red': + barColors[1].red + 20, '--green': + barColors[1].green + 20, '--blue': + barColors[1].blue + 20}\"/>\r\n                        <div class=\"fill excess\" :style=\"{'--percent': + 1 - percentileData.energy, '--red': + barColors[1].red - 20, '--green': + barColors[1].green - 20, '--blue': + barColors[1].blue - 20}\"/>\r\n                    </div>\r\n                    <h4 class=\"value\">{{percent(percentileData.energy)}}</h4>\r\n                </div>\r\n                 <div v-if=\"percentileDataReady\" class=\"row stat\">\r\n                    <h4 class=\"bar-title\">Danceable</h4>\r\n                    <div class=\"stat-bar\">\r\n                        <div class=\"fill\" :style=\"{'--percent': + percentileData.danceability, '--red': + barColors[2].red + 20, '--green': + barColors[2].green + 20, '--blue': + barColors[2].blue + 20}\"/>\r\n                        <div class=\"fill excess\" :style=\"{'--percent': + 1 - percentileData.danceability, '--red': + barColors[2].red - 20, '--green': + barColors[2].green - 20, '--blue': + barColors[2].blue - 20}\"/>\r\n                    </div>\r\n                    <h4 class=\"value\">{{percent(percentileData.danceability)}}</h4>\r\n                </div>\r\n            </div>\r\n            <h1 id=\"instructions\" @click=\"libraryAnalysis\" :style=\"{'--delay': 7}\" v-if=\"!audioFeaturesDone\">Run Library Analysis for Personalized Data</h1>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'TrackAnalysis',\r\n    props: {\r\n        trackData: Object,\r\n    },\r\n    data() {\r\n        return {\r\n            length: 300,\r\n            background: 25,\r\n            barColors: [\r\n                {red: 242, green: 142, blue: 43},\r\n                {red: 89, green: 161, blue: 79},\r\n                {red: 78, green: 121, blue: 167},\r\n                {red: 225, green: 87, blue: 89},\r\n                {red: 74, green: 189, blue: 180},\r\n                {red: 237, green: 201, blue: 72},\r\n                {red: 255, green: 157, blue: 167},\r\n                {red: 176, green: 122, blue: 161},\r\n                {red: 156, green: 117, blue: 95},\r\n                {red: 180, green: 189, blue: 74},\r\n            ],\r\n            artist: null,\r\n            artistDone: false,\r\n            audioAnalysisReady: false,\r\n            audioAnalysisSegments: 80,\r\n            percentileData: {\r\n                valence: 0,\r\n                danceability: 0,\r\n                energy: 0,\r\n            },\r\n            percentileDataReady: false,\r\n        }\r\n    },\r\n    methods: {\r\n        libraryAnalysis() {\r\n            this.$router.push('/libraryanalysis');\r\n        },\r\n        findArtistSongsSaved(artist) {\r\n            if (\"artists\" in this.libraryData)\r\n                if (artist in this.libraryData.artists)\r\n                    return this.libraryData.artists[artist].num;\r\n            return \"0\";\r\n        },\r\n        time(seconds) {\r\n            let zero = \"\";\r\n            if (seconds % 60 < 10)\r\n            {\r\n                zero = \"0\";\r\n            }\r\n            if (seconds < 60)\r\n            {\r\n                return \"0:\" + zero + seconds;\r\n            }\r\n            return Math.floor(seconds / 60) + \":\" + zero + (seconds % 60);\r\n        },\r\n        mode(val) {\r\n            if (val)\r\n                return \"Major\";\r\n            return \"Minor\";\r\n        \r\n        },\r\n        keyTell(val) {\r\n            let keys = [\"C\", \"C#/Db\", \"D\", \"D#/Eb\", \"E\", \"F\", \"F#/Gb\", \"G\", \"G#/Ab\", \"A\", \"A#/Bb\", \"B\"];\r\n            if (val == -1)\r\n                return \"Not Found\";\r\n            return keys[val % 12];\r\n        },\r\n        percent(value) {\r\n            return Math.round(value * 100) + \"%\";\r\n        },\r\n        async getArtistDetails() {\r\n            this.artist = await this.$store.dispatch('getArtist', this.trackData.artists[0].id);\r\n            this.artistDone = true;\r\n        },\r\n        cleanAudioAnalysis() {\r\n            let newSegments = [];\r\n            if (this.trackData.audioAnalysis.segments.length < this.audioAnalysisSegments)\r\n                this.audioAnalysisSegments = this.trackData.audioAnalysis.segments.length;\r\n            let width = Math.round(this.trackData.audioAnalysis.segments.length / this.audioAnalysisSegments);\r\n            \r\n            for (var i = 0; i < this.audioAnalysisSegments; i++)\r\n            {\r\n                let itemIndex = Math.round(width * i);\r\n                if (itemIndex > this.trackData.audioAnalysis.segments.length - 1)\r\n                {\r\n                    itemIndex = this.trackData.audioAnalysis.segments.length - 2;\r\n                }\r\n                let sum = 0;\r\n                for (var j = 0; j < this.trackData.audioAnalysis.segments[itemIndex].pitches.length; j++)\r\n                {\r\n                    sum += this.trackData.audioAnalysis.segments[itemIndex].pitches[j];\r\n                }\r\n                let averagePitch = sum / this.trackData.audioAnalysis.segments[itemIndex].pitches.length;\r\n                let color = this.HSVtoRGB(((1 - averagePitch) *229 + -50) / 360,.51,.89);\r\n                let loudness = (Math.round(((this.trackData.audioAnalysis.segments[itemIndex].loudness_max / 60) + 1) * 100) / 100);\r\n\r\n                newSegments.push({\r\n                    start: Math.round(this.trackData.audioAnalysis.segments[itemIndex].start),\r\n                    loudness_max: loudness, \r\n                    red: color.r,\r\n                    green: color.g,\r\n                    blue: color.b,\r\n                });\r\n            }\r\n            this.trackData.audioAnalysis.segments = null;\r\n            this.trackData.audioAnalysis.segments = newSegments;\r\n            this.audioAnalysisReady = true;\r\n        },\r\n        HSVtoRGB(h, s, v) {\r\n            var r, g, b, i, f, p, q, t;\r\n            if (arguments.length === 1) {\r\n                s = h.s, v = h.v, h = h.h;\r\n            }\r\n            i = Math.floor(h * 6);\r\n            f = h * 6 - i;\r\n            p = v * (1 - s);\r\n            q = v * (1 - f * s);\r\n            t = v * (1 - (1 - f) * s);\r\n            switch (i % 6) {\r\n                case 0: r = v, g = t, b = p; break;\r\n                case 1: r = q, g = v, b = p; break;\r\n                case 2: r = p, g = v, b = t; break;\r\n                case 3: r = p, g = q, b = v; break;\r\n                case 4: r = t, g = p, b = v; break;\r\n                case 5: r = v, g = p, b = q; break;\r\n            }\r\n            return {\r\n                r: Math.round(r * 255),\r\n                g: Math.round(g * 255),\r\n                b: Math.round(b * 255)\r\n            };\r\n        },\r\n        calculatePercentiles() {\r\n            let keys = Object.keys(this.percentileData);\r\n            for (var i = 0; i < keys.length; i++)\r\n            {\r\n                let less = 0;\r\n                for (var j = 0; j < this.libraryData.tracks.length; j++)\r\n                {\r\n                    if (this.libraryData.tracks[j][keys[i]] < this.trackData.audioFeatures[keys[i]])\r\n                        less += 1;\r\n                }\r\n                this.percentileData[keys[i]] = less / this.libraryData.tracks.length;\r\n            }\r\n            this.percentileDataReady = true;\r\n        },\r\n    },\r\n    computed: {\r\n        banger() {\r\n            return (this.trackData.audioFeatures.tempo - 96 + (this.trackData.audioFeatures.energy*100) + (this.trackData.audioFeatures.danceability * 50)) / 210;\r\n        },\r\n        bangerConclusion() {\r\n            let results = [\"Banger? More like Bummer\", \"Nah Bruh\", \"Not Banger.\", \"Cool, but not Banger\", \"Like Sorta Banger?\", \"Got A Semi-Banger\", \"Almost Banger\", \"What a Banger!\", \"Absolute Banger Bro\", \"Banger of all Bangers\"];\r\n            if (Math.floor(this.banger * 10) < results.length)\r\n                return results[Math.floor(this.banger * 10)];\r\n            return \"Banger of all Bangers\";\r\n        },\r\n        audioFeaturesDone() {\r\n            return this.$store.state.libraryData.complete.audioFeaturesDone;\r\n        },\r\n        libraryData() {\r\n            return this.$store.state.libraryData;\r\n        }\r\n    },\r\n    async created() {\r\n        this.getArtistDetails();\r\n        this.trackData.audioAnalysis = await this.$store.dispatch('getAudioAnalysisForTrack', this.trackData.id);\r\n        this.cleanAudioAnalysis();\r\n        this.calculatePercentiles();\r\n    }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n#instructions {\r\n    --delay: 0;\r\n    cursor: pointer;\r\n    animation: slide-up .5s ease calc(var(--delay) * .1s), peekaboo calc(var(--delay) * .1s);\r\n    display: block;\r\n    width: 400px;\r\n    height: 80px;\r\n    padding-top: 68px;\r\n    text-overflow: clip;\r\n    line-height: 40px;\r\n    color: rgba(255, 255, 255, 0.219);\r\n    text-align: center;\r\n    overflow: hidden;\r\n    white-space:normal;\r\n}\r\n.loading {\r\n  margin-top: 30px;\r\n}\r\n\r\n.graph-key {\r\n    position: absolute;\r\n    width: calc(100% - 40px);\r\n    bottom: 10px;\r\n    text-align: center;\r\n    font-size: .8em;\r\n    color:rgba(255, 255, 255, 0.267);\r\n}\r\n#banger-conclusion {\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    color: rgb(252, 140, 142);\r\n    font-size: 3em;\r\n}\r\n#track-image {\r\n    display: block;\r\n    width: 100px;\r\n    height: 100px;\r\n    background-size: 100% auto;\r\n    background-position: center center;\r\n    margin-right: 20px;\r\n}\r\n\r\n@keyframes slide-up {\r\n  from {\r\n    transform: translateY(100px);\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n.nomargin {\r\n    margin: 0 !important;\r\n}\r\n\r\n.graph {\r\n    --numBars: 0;\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    width: 100%;\r\n    max-width: 400px;\r\n    height: 187px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.graph-bar {\r\n    --height: 0;\r\n    --red: 240;\r\n    --green: 193;\r\n    --blue: 111;\r\n    display: block;\r\n    width: calc((100% / var(--numBars)) - 1px);\r\n    height: calc(125px * var(--height));\r\n    background-color: rgba(var(--red), var(--green), var(--blue), .9);\r\n    border-radius: 3px;\r\n    position: relative;\r\n}\r\n\r\n.graph-bar p {\r\n    display: none;\r\n    position: absolute;\r\n    font-size: 1em;\r\n    color: white;\r\n    text-align: center;\r\n    top: calc(((125px * var(--height)) / 2) + -80px);\r\n    transform: translateX(-15px);\r\n}\r\n\r\n.graph-bar:hover p {\r\n    display: block;\r\n}\r\n.fit {\r\n    width: calc(100% - 120px);\r\n}\r\n\r\n\r\n#analysis {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    flex-wrap: wrap;\r\n    width: calc(100% - 64px);\r\n    margin: 32px;\r\n    animation: slide-up .5s ease;\r\n}\r\n\r\nh1 {\r\n    font-size: 1.4em;\r\n    color: white;\r\n    text-align: left;\r\n    margin: 0px 0px;\r\n    line-height: 30px;\r\n    display: block;\r\n    max-width: calc(100% - 5px);\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n}\r\n\r\nh2 {\r\n    font-size: 1em;\r\n    color: rgba(255, 255, 255, 0.568);\r\n    text-align: left;\r\n    margin: 0;\r\n    margin-top: 10px;\r\n    max-width: calc(100% - 5px);\r\n    text-transform: capitalize;\r\n        text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n}\r\n\r\n#artists {\r\n    display: flex;\r\n    max-width: calc(100% - 5px);\r\n    overflow: hidden;\r\n}\r\n\r\n#artists h3 {\r\n    font-size: 1em;\r\n    color: rgba(255, 255, 255, 0.927);\r\n    text-align: left;\r\n    margin: 0px 0px;\r\n    margin-right: 5px;\r\n    margin-top: 10px;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n}\r\n\r\n.window h3 {\r\n  text-align: left;\r\n  animation: none;\r\n  font-size: 1.6em;\r\n  margin: 0;\r\n  color: white;\r\n  margin-bottom: 15px;\r\n}\r\n\r\nh4 {\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0;\r\n  text-align: left;\r\n}\r\n\r\np {\r\n    margin: 0;\r\n    color: white;\r\n    text-align: left;\r\n}\r\n\r\n.window {\r\n  --delay: 0;\r\n  animation: slide-up .5s ease calc(var(--delay) * .1s), peekaboo calc(var(--delay) * .1s);\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 75%;\r\n  margin: 20px 20px;\r\n  padding: 20px;\r\n  max-width: 400px;\r\n  border-radius: 5px;\r\n  margin-bottom: 20px;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border: 1px solid rgba(255, 255, 255, 0.247);\r\n}\r\n\r\n\r\n\r\n.flex {\r\n    display: flex;\r\n}\r\n\r\n.bar-title {\r\n  width: 115px;\r\n}\r\n\r\n.stat-bar {\r\n    display: flex;\r\n    border-radius: 5px;\r\n    overflow: hidden;\r\n    width: 200px;\r\n    max-height: 10px;\r\n    background-color: rgba(255, 255, 255, 0.247);\r\n}\r\n\r\n.stat-bar .fill {\r\n    --percent: 0;\r\n    --red: 255;\r\n    --green: 255;\r\n    --blue: 255;\r\n    display: block;\r\n    width: calc(var(--percent) * 100%);\r\n    height: 10px;\r\n    background: rgb(var(--red), var(--green), var(--blue));\r\n    animation: slow-fill 1s ease;\r\n}\r\n\r\n.stat-bar .fill.excess {\r\n    border-left: 2px solid rgb(37, 37, 37);\r\n    background: rgba(var(--red), var(--green), var(--blue), .5);\r\n    width: calc((var(--percent) * 100%) - 2px);\r\n    animation: border-throb 1s ease-in-out infinite;\r\n}\r\n\r\n@keyframes border-throb {\r\n    50% {\r\n        border-left: 2px solid rgb(255, 255, 255);\r\n    }\r\n}\r\n\r\n\r\n.stat {\r\n  margin-bottom: 15px;\r\n  justify-content: space-between;\r\n}\r\n\r\n@keyframes slow-fill {\r\n  from {\r\n    width: calc(var(--percent) * 0%);\r\n  }\r\n}\r\n\r\n.row {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n</style>"]}]}
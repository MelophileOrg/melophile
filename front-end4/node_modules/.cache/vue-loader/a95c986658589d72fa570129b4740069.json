{"remainingRequest":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\src\\views\\Analysis\\ArtistAnalysis.vue?vue&type=style&index=0&id=29c7b6ac&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\src\\views\\Analysis\\ArtistAnalysis.vue","mtime":1574131483925},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQojbWFpbiB7DQogIC0tcmVkOiAyNTU7DQogIC0tZ3JlZW46IDI1NTsNCiAgLS1ibHVlOiAyNTU7DQogIC0tYWxwaGE6IDA7DQogIC8qIGJhY2tncm91bmQ6IHJnYmEodmFyKC0tcmVkKSwgdmFyKC0tZ3JlZW4pLCB2YXIoLS1ibHVlKSwgdmFyKC0tYWxwaGEpKTsgKi8NCn0NCmgxLnNlY3Rpb24tdGl0bGUgew0KICBmb250LXNpemU6IDEuM2VtOw0KICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgxNSk7DQogIGZvbnQtd2VpZ2h0OiBsaWdodGVyOw0KICBtYXJnaW4tYm90dG9tOiAxNnB4Ow0KfQ0KDQouc3ViLXRpdGxlIHsNCiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC45NDUpOw0KICBmb250LXdlaWdodDogYm9sZDsNCiAgZm9udC1zaXplOiAxLjFlbTsNCiAgbWFyZ2luOiAwOw0KfQ0KDQpwIHsNCiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41MzQpOw0KICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICBtYXJnaW46IDBweCAwcHg7DQogIGxpbmUtaGVpZ2h0OiAyNXB4Ow0KfQ0KDQoubWVtYmVyLWFjdGl2ZSB7DQogIGRpc3BsYXk6IGJsb2NrOw0KICBoZWlnaHQ6IDIwcHg7DQogIHdpZHRoOiAyMHB4Ow0KICBtYXJnaW46IDA7DQogIG1hcmdpbi1yaWdodDogNXB4Ow0KfQ0KDQppbWcgew0KICBtYXgtd2lkdGg6IDMwMHB4Ow0KICBtYXgtaGVpZ2h0OiAzMDBweDsNCiAgbWFyZ2luOiAwcHggMTBweDsNCiAgYm9yZGVyLXJhZGl1czogNXB4Ow0KfQ0KDQojcHJvZmlsZSB7DQogIG1heC13aWR0aDogMzAwcHg7DQogIG1hcmdpbjogMHB4IDEwcHg7DQp9DQoNCi50b3AtdHJhY2sgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBoZWlnaHQ6IDQ1cHg7DQp9DQoNCi50b3AtdHJhY2sgcCB7DQogIHdpZHRoOiBjYWxjKDEwMCUgLSAyMHB4IC0gNDVweCk7DQogIGRpc3BsYXk6IGJsb2NrOw0KICBsaW5lLWhlaWdodDogMTZweDsNCiAgaGVpZ2h0OiAxNnB4Ow0KICBjb2xvcjogd2hpdGU7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIGZvbnQtd2VpZ2h0OiBsaWdodGVyOw0KICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjY5OSk7DQogIG1hcmdpbi1sZWZ0OiAxNnB4Ow0KfQ0KDQoudG9wLXRyYWNrIC5pbmRleCB7DQogIHdpZHRoOiAyMHB4Ow0KICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjM0OSk7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCg0KLmJvcmRlciB7DQogIGhlaWdodDogMTAwJTsNCiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMTkpOw0KfQ0KDQouYm9yZGVydG9wIHsNCiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMTkpOw0KfQ0KDQoudG9wLXRyYWNrIC50cmFjay1pbWFnZSB7DQogIGRpc3BsYXk6IGJsb2NrOw0KICB3aWR0aDogNDVweDsNCiAgaGVpZ2h0OiA0NXB4Ow0KICBtYXJnaW46IDA7DQogIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlOw0KICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOw0KICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuNDUyKTsNCn0NCg0KI3RvcFRyYWNrc0xpc3Qgew0KICBtYXgtd2lkdGg6IDQwMHB4Ow0KfQ0KDQouZmVhdHVyZWR0cmFja3Mgew0KICAtLWRlbGF5OiAwOw0KICBhbmltYXRpb246IHNsaWRlLXVwIC41cyBlYXNlIGNhbGModmFyKC0tZGVsYXkpICogLjFzKSwgaGlkZSBjYWxjKHZhcigtLWRlbGF5KSAqIC4xcyk7DQp9DQoubGlicmFyeSB7DQogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vLi4vYXNzZXRzL2ljb25zL2hlYXJ0LnN2ZycpOw0KfQ0KI25vc29uZ3Mgew0KICBtYXJnaW4tYm90dG9tOiAxMHB4Ow0KICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMzNik7DQogIHBhZGRpbmc6IDEwcHg7DQogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNywgNywgNywgMC4zMzYpOw0KICBib3JkZXItcmFkaXVzOiAxMHB4Ow0KfQ0KLm5vbWFyZ2luIHsNCiAgbWFyZ2luLWJvdHRvbTogMHB4Ow0KfQ0KDQpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MjBweCkgew0KICAjYXJ0aXN0LWltYWdlIHsNCiAgICB3aWR0aDogNzBweCAhaW1wb3J0YW50Ow0KICAgIGhlaWdodDogNzBweCAhaW1wb3J0YW50Ow0KICAgIG1hcmdpbi1yaWdodDogMjBweDsNCiAgfQ0KDQogIC5maXQgew0KICAgIHdpZHRoOiBjYWxjKDEwMCUgLSA5MHB4KSAhaW1wb3J0YW50Ow0KICB9DQp9DQoNCkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDcyMHB4KSB7DQogIC53aW5kb3dzIHsNCiAgICBtYXJnaW4tdG9wOiAxNXB4Ow0KICB9DQoNCiAgI3RyYWNrLWltYWdlIHsNCiAgICB3aWR0aDogNzBweCAhaW1wb3J0YW50Ow0KICAgIGhlaWdodDogNzBweCAhaW1wb3J0YW50Ow0KICAgIG1hcmdpbi1yaWdodDogMjBweDsNCiAgfQ0KDQogIGgxIHsNCiAgICBmb250LXNpemU6IDEuMmVtICFpbXBvcnRhbnQ7DQogICAgDQogIH0NCg0KICBoMiB7DQogICAgICBmb250LXNpemU6IC44ZW0gIWltcG9ydGFudDsNCiAgICAgIG1hcmdpbjogMnB4ICFpbXBvcnRhbnQ7DQogIH0NCg0KICBoNCB7DQogICAgZm9udC1zaXplOiAuOWVtICFpbXBvcnRhbnQ7DQogIH0NCg0KfQ0KDQpoNCB7DQogIG1hcmdpbi1ib3R0b206IDBweDsNCiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zMzYpOw0KICBwYWRkaW5nOiAxMHB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDcsIDcsIDcsIDAuMzM2KTsNCiAgYm9yZGVyLXJhZGl1czogMTBweDsNCn0NCg0KI2FydGlzdC1pbWFnZSB7DQogIGRpc3BsYXk6IGJsb2NrOw0KICB3aWR0aDogMTAwcHg7DQogIGhlaWdodDogMTAwcHg7DQogIGJhY2tncm91bmQtc2l6ZTogYXV0byAxMDAlOw0KICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOw0KICBtYXJnaW4tcmlnaHQ6IDIwcHg7DQp9DQoNCg0KaDEgew0KICBmb250LXNpemU6IDEuN2VtOw0KICBkaXNwbGF5OiBibG9jazsNCiAgY29sb3I6IHdoaXRlOw0KICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICBtYXJnaW46IDBweCAwcHg7DQogIGxpbmUtaGVpZ2h0OiAzMHB4Ow0KICBkaXNwbGF5OiBibG9jazsNCiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7DQogIG92ZXJmbG93OiBoaWRkZW47DQogIHdoaXRlLXNwYWNlOiBub3dyYXA7DQogIG1hcmdpbi10b3A6IDNweDsNCn0NCg0KaDIgew0KICBmb250LXNpemU6IDFlbTsNCiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41NjgpOw0KICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICBtYXJnaW46IDA7DQogIG1hcmdpbi10b3A6IDEwcHg7DQogIG1heC13aWR0aDogY2FsYygxMDAlIC0gNXB4KTsNCiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7DQogIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOw0KICBvdmVyZmxvdzogaGlkZGVuOw0KICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KfQ0KDQouZml0IHsNCiAgZGlzcGxheTogYmxvY2s7DQogIHdpZHRoOiBjYWxjKDEwMCUgLSAxMjBweCk7DQp9DQoNCi5mbGV4IHsNCiAgd2lkdGg6IDEwMCU7DQp9DQoNCg=="},{"version":3,"sources":["ArtistAnalysis.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"ArtistAnalysis.vue","sourceRoot":"src/views/Analysis","sourcesContent":["<template>\r\n  <div id=\"main-flex\" class=\"artistanalysis\">\r\n    <NavBar/>    \r\n    <div id=\"main\" :style=\"{'--red': + red, '--green': + green, '--blue': + blue, '--alpha': + alpha}\">\r\n      <ArtistHeader @changeTab=\"changeTab\" :savedProcessed=\"savedProcessed\" :color=\"color\" :artistData=\"artistData\"/>\r\n      <div class=\"page\" id=\"overview\" v-if=\"tab == 0\">\r\n        <ArtistTopTracks :topTracks=\"topTracksLoaded\" :override=\"topProcessed\" :color=\"color\"/>\r\n        <!-- Top Track Analysis -->\r\n        <!-- Genres -->\r\n      </div>\r\n      <div class=\"page\" id=\"likedtracks\" v-if=\"tab == 1\">\r\n        \r\n\r\n\r\n      </div>\r\n\r\n      <div class=\"page\" id=\"comparison\" v-if=\"tab == 2\">\r\n\r\n      \r\n      </div>\r\n<!-- \r\n      <div class=\"windows\">\r\n        \r\n        <div class=\"window\" :style=\"{'--delay': 0}\">\r\n          <div v-if=\"artistData != null\" class=\"flex\">\r\n            <div class=\"flex\">\r\n              <div class=\"col\">\r\n                <div id=\"artist-image\" :style=\"{backgroundImage: 'url(\\'' + artistData.image + '\\')'}\"/>\r\n              </div>\r\n              <div class=\"col fit\">\r\n                <h1 id=\"artist-name\">{{artistData.name}}</h1>\r\n                <h2>{{Math.round(artistData.popularity)}} / 100 Popularity</h2>\r\n                <h2>{{formatNumber(artistData.followers)}} Followers</h2>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Loading v-else/>\r\n        </div>\r\n\r\n        <div class=\"window\" :style=\"{'--delay': 1}\" v-if=\"progress.tracks\">\r\n          <div v-if=\"artistData != null\" class=\"flex\">\r\n            <div class=\"flex\">\r\n              <div class=\"col\">\r\n                <div id=\"artist-image\" class=\"library\"/>\r\n              </div>\r\n              <div class=\"col fit\">\r\n                <h1 id=\"artist-name\">Liked Songs:</h1>\r\n                <h2 v-if=\"timelineReady && !noneTimeline\">First Liked: {{oldestLiked}}</h2>\r\n                <h2 v-if=\"progress.tracks && !noneTimeline\">{{songsSaved}}</h2>\r\n                <h2 v-if=\"!progress.tracks\">Finding Saved Songs...</h2>\r\n                <h4 id=\"nosongs\" v-if=\"noneTimeline\">No Songs Liked</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Loading v-else/>\r\n        </div>\r\n\r\n        <FeaturedTracks type=\"track\" secondary=\"popularity\" :style=\"{'--delay': + 4}\" class=\"featuredtracks\" :saved=\"false\" :none=\"false\" :override=\"topTracksReady\" title=\"Artist Top Tracks:\" :ids=\"topTracks\"/>\r\n\r\n        <FeaturedTracks type=\"genre\" secondary=\"\" :style=\"{'--delay': + 5}\" class=\"featuredtracks\" :saved=\"false\" :none=\"false\" :override=\"artistData != null\" title=\"Artist Genres:\" :ids=\"genresComputed\"/>\r\n\r\n        <div class=\"window\" :style=\"{'--delay': + 2}\">\r\n          <h3  class=\"window-title\" v-if=\"artistData != null\">Top Track's Characteristics:</h3>\r\n          <div v-if=\"topTracksReady\">\r\n            <div>\r\n              <PercentBar title=\"Happiness\" :percent=\"sumTop('valence')\" :color=\"audioFeatures.valence.color\" />\r\n              <PercentBar title=\"Energy\" :percent=\"sumTop('energy')\" :color=\"audioFeatures.energy.color\" />\r\n              <PercentBar title=\"Danceability\" :percent=\"sumTop('danceability')\" :color=\"audioFeatures.danceability.color\" />\r\n            </div>\r\n          </div>\r\n          <Loading v-else/>\r\n        </div>\r\n\r\n        <Timeline :none=\"noneTimeline\" :small=\"true\" :override=\"timelineReady\" title=\"When You Liked Tracks:\" instructions=\"\" :max=\"-1\" :delay=\"3\" :bars=\"datesAdded\" y_axis=\"Number of Songs\" :color=\"{red: 74, green: 189, blue: 180}\"/>\r\n\r\n        <div class=\"window\" :style=\"{'--delay': + 6}\">\r\n          <h3  class=\"window-title\" v-if=\"artistData != null\">Liked Track's Characteristics:</h3>\r\n          <div v-if=\"audioFeaturesReady\">\r\n            <div v-if=\"!none\">\r\n              <PercentBar title=\"Happiness\" :percent=\"artistData.valence\" :color=\"audioFeatures.valence.color\" />\r\n              <PercentBar title=\"Energy\" :percent=\"artistData.energy\" :color=\"audioFeatures.energy.color\" />\r\n              <PercentBar title=\"Danceability\" :percent=\"artistData.danceability\" :color=\"audioFeatures.danceability.color\" />\r\n            </div>\r\n            <h4 v-else>No Songs Liked</h4>\r\n          </div>\r\n          <Loading class=\"displace\" v-else/>\r\n        </div>\r\n\r\n        <Graph :zero=\"notSaved\" :override=\"progress.tracks\" title=\"Liked Tracks Happiness:\" :delay=\"7\" :bars=\"cleanGraphDataForwards(audioFeaturesGraphs.valence)\" max_tag=\"Happy\" min_tag=\"Sad\" y_axis=\"Number of Songs\" :color=\"audioFeatures.valence.color\"/>\r\n\r\n        <Graph :zero=\"notSaved\" :override=\"progress.tracks\" title=\"Liked Tracks Energy:\" :delay=\"8\" :bars=\"cleanGraphDataForwards(audioFeaturesGraphs.energy)\" max_tag=\"Hyper\" min_tag=\"Peaceful\" y_axis=\"Number of Songs\" :color=\"audioFeatures.energy.color\"/>\r\n\r\n        <Graph :zero=\"notSaved\" :override=\"progress.tracks\" title=\"Liked Tracks Danceability:\" :delay=\"9\" :bars=\"cleanGraphDataForwards(audioFeaturesGraphs.danceability)\" max_tag=\"Let's dance!\" min_tag=\"Couch Potato\" y_axis=\"Number of Songs\" :color=\"audioFeatures.danceability.color\"/>\r\n\r\n        <FeaturedTracks type=\"track\" secondary=\"date\" :style=\"{'--delay': + 11}\" class=\"featuredtracks\" :saved=\"true\" :none=\"noneTimeline\" :override=\"timelineReady\" title=\"Recently Liked Tracks:\" :ids=\"newestTracks\"/>\r\n\r\n        <FeaturedTracks type=\"track\" secondary=\"date\" :style=\"{'--delay': + 10}\" class=\"featuredtracks\" :saved=\"true\" :none=\"noneTimeline\" :override=\"timelineReady\" title=\"Oldest Liked Tracks:\" :ids=\"oldestTracks\"/>\r\n\r\n        \r\n        \r\n\r\n      </div> -->\r\n\r\n      <Progress v-if=\"inicialized && progress.processed < progress.total\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst axios = require('axios');\r\nimport analyze from 'rgbaster';\r\n\r\nimport NavBar from '@/components/Navigation/NavBar.vue'\r\nimport Progress from '@/components/General/Progress.vue'\r\nimport ArtistHeader from '@/components/Artist/ArtistHeader.vue'\r\nimport ArtistTopTracks from '@/components/Artist/ArtistTopTracks.vue'\r\n\r\nexport default {\r\n  name: 'artistanalysis',\r\n  components: {\r\n      NavBar,\r\n      ArtistHeader,\r\n      ArtistTopTracks,\r\n      Progress,\r\n  },\r\n  data() {\r\n      return {\r\n        artistData: null,\r\n\r\n        color: {r: 0, g: 0, b: 0, a: 0},\r\n\r\n        audioFeaturesGraphs: {\r\n          valence: [0,0,0,0,0,0,0,0,0,0],\r\n          energy: [0,0,0,0,0,0,0,0,0,0],\r\n          danceability: [0,0,0,0,0,0,0,0,0,0],\r\n        },\r\n\r\n        artistProcessed: false,\r\n        topProcessed: false,\r\n        savedProcessed: false,\r\n\r\n        tab: 0,\r\n        interval: null,\r\n      }\r\n  },\r\n  methods: {\r\n    changeTab(val) {\r\n      console.log(this.artistData);\r\n      this.tab = val;\r\n    },\r\n    async dominantColor(image) {\r\n      let result = await analyze(image);\r\n      let re = RegExp(/\\d+/i, 'g');\r\n      this.color.r = parseInt(re.exec(result[0].color), 10);\r\n      this.color.g = parseInt(re.exec(result[0].color), 10);\r\n      this.color.b = parseInt(re.exec(result[0].color), 10);\r\n      this.color.a = .4;\r\n    },\r\n    async retrieveArtistData() {\r\n      let spotifyData = await this.$store.dispatch(\"getArtist\", this.$route.params.id);\r\n      if ('images' in spotifyData && spotifyData.images.length > 0)\r\n        this.dominantColor(spotifyData.images[0].url);\r\n      let discogsData = await axios.get('/api/discogs/artist/' + spotifyData.name);\r\n      this.artistData = await this.processArtist(spotifyData, discogsData.data);\r\n      this.artistProcessed = true;\r\n      await this.getTopTracks();\r\n      this.topProcessed = true;\r\n      this.interval = setInterval(this.checkTracks, 500);\r\n    },\r\n    processArtist(artist, discogs) {\r\n      console.log(artist);\r\n      console.log(discogs);\r\n      let artistObject = Object.assign({}, artist);\r\n      artistObject.images = [artistObject.images[0].url];\r\n      if ('images' in discogs)\r\n        if (discogs.images.length > 0)\r\n          for (let i = 0; i < discogs.images.length; i++) {\r\n            artistObject.images.push(discogs.images[i].resource_url);\r\n          }\r\n      artistObject.members = [];\r\n      if ('members' in discogs)\r\n        artistObject.members = discogs.members;\r\n      artistObject.namevariations = [];\r\n      if ('namevariations' in discogs);\r\n        artistObject.namevariations = discogs.namevariations;\r\n      artistObject.profile = \"\";\r\n      if ('profile' in discogs);\r\n        artistObject.profile = discogs.profile;\r\n      artistObject.realname = \"\";\r\n      if ('realname' in discogs);\r\n        artistObject.realname = discogs.realname;\r\n      artistObject.website = \"\";\r\n      artistObject.facebook = \"\";\r\n      artistObject.instagram = \"\";\r\n      artistObject.youtube = \"\";\r\n      if ('urls' in discogs)\r\n        for (let i = 0; i < discogs.urls.length; i++) {\r\n          if (discogs.urls[i].includes('facebook'))\r\n            artistObject.facebook = discogs.urls[i];\r\n          else if (discogs.urls[i].includes('instagram'))\r\n            artistObject.instagram = discogs.urls[i];\r\n          else if (discogs.urls[i].includes('youtube'))\r\n            artistObject.youtube = discogs.urls[i];\r\n          else if (i == 0) \r\n            artistObject.website = discogs.urls[i];\r\n        }\r\n      artistObject.timeline = [];\r\n      artistObject.oldest = [];\r\n      artistObject.newest = [];\r\n      artistObject.savedTracks = {tracks: [], energy: 0, valence: 0, danceability: 0};\r\n      artistObject.topTracks = {tracks: [], energy: 0, valence: 0, danceability: 0};\r\n      \r\n      return artistObject;\r\n    },\r\n    async checkTracks() {\r\n      if (this.progress.tracks) {\r\n        clearInterval(this.interval);\r\n        this.artistData.savedTracks.tracks = await this.artistTracks();\r\n        await this.processTracks();\r\n        this.savedProcessed = true;\r\n      }\r\n    },\r\n    async artistTracks() {\r\n      if (!(this.artistData.id in this.$store.state.artists))\r\n        return [];\r\n      let ids = this.$store.state.artists[this.artistData.id].tracks;\r\n      let tracks = [];\r\n\r\n      let now = new Date();\r\n      let nowTime = now.getTime();\r\n      const MONTH = 2626560000;\r\n\r\n      let orderByDate = [];\r\n      for (let i = 0; i < ids.length; i++) {\r\n          tracks.push(this.$store.state.tracks[ids[i]]);\r\n          let date = new Date(tracks[i].date);\r\n          let dateTime = date.getTime();\r\n          let diff = nowTime - dateTime;\r\n          let diffMonth = Math.floor(diff / MONTH);\r\n          orderByDate.push({id: tracks[i], time: dateTime, month: diffMonth});\r\n          if (diffMonth >= this.artistData.timeline.length) {\r\n              while (diffMonth >= this.artistData.timeline.length) {\r\n                  this.artistData.timeline.push(0);\r\n              }\r\n          }\r\n          this.artistData.timeline[diffMonth] += 1;\r\n      }\r\n      orderByDate.sort((a, b) => (a.time > b.time) ? 1 : -1);\r\n      let num = orderByDate.length;\r\n      if (orderByDate.length > 10) \r\n        num = 10;\r\n      \r\n      this.artistData.oldest = orderByDate.slice(0, num);\r\n      this.artistData.newest = orderByDate.slice(orderByDate.length - num, orderByDate.length);\r\n      while (this.artistData.timeline.length < this.$store.state.dateAdded.length) {\r\n          this.artistData.timeline.push(0);\r\n      }\r\n      return tracks;\r\n    },\r\n    async processTracks() { \r\n      let ids = this.artistData.savedTracks.tracks.map(value => value.id);\r\n      let keys = ['valence', 'danceability', 'energy'];\r\n\r\n      while (ids.length > 0) {\r\n        let newIds = ids.splice(0, 50);\r\n        let audioFeatures = await this.$store.dispatch('getAudioFeaturesForTracks', newIds);\r\n        for (let i = 0; i < audioFeatures.length; i++) {\r\n          for (let j = 0; j < keys.length; j++) {\r\n            this.artistData.savedTracks[keys[j]] += audioFeatures[i][keys[j]];\r\n            this.audioFeaturesGraphs[keys[j]][Math.floor(audioFeatures[i][keys[j]] * 10)] += 1;\r\n          }\r\n        }\r\n      }\r\n      for ( let i = 0; i < keys.length; i++) {\r\n        this.artistData.savedTracks[keys[i]] = this.artistData.savedTracks[keys[i]] / this.artistData.savedTracks.tracks.length;\r\n      }\r\n    },\r\n    async artistTopTracks() {\r\n        let tracks = await this.$store.dispatch('getArtistTopTracks', this.$route.params.id);\r\n        let ids = [];\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            if (tracks[i].album.images.length > 1)\r\n                tracks[i].image = tracks[i].album.images[0].url;\r\n            ids.push(tracks[i].id);\r\n        }\r\n        let audioFeatures = await this.$store.dispatch('getAudioFeaturesForTracks', ids);\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            tracks[i].valence = audioFeatures[i].valence;\r\n            tracks[i].energy = audioFeatures[i].energy;\r\n            tracks[i].danceability = audioFeatures[i].danceability;\r\n        }\r\n        return tracks;\r\n    },\r\n\r\n    async getTopTracks() {\r\n      let tracks = await this.artistTopTracks();\r\n      for (let i = 0; i < tracks.length; i++) {\r\n        this.artistData.topTracks.tracks.push(tracks[i]);\r\n        this.artistData.topTracks.valence += tracks[i].valence;\r\n        this.artistData.topTracks.energy += tracks[i].energy;\r\n        this.artistData.topTracks.danceability += tracks[i].danceability;\r\n        this.artistData.topTracks.tracks[i].image = this.artistData.topTracks.tracks[i].album.images[0].url;\r\n      }\r\n      this.artistData.topTracks.valence /= this.artistData.topTracks.tracks.length;\r\n      this.artistData.topTracks.energy /= this.artistData.topTracks.tracks.length;\r\n      this.artistData.topTracks.danceability /= this.artistData.topTracks.tracks.length;\r\n      this.topTracksReady = true;\r\n    },\r\n\r\n    cleanGraphDataForwards(bars) {\r\n      let graphData = [];\r\n      for (let i = 0; i < bars.length; i++) {\r\n        graphData.push({value: bars[i], tag: bars[i]});\r\n      }\r\n      return graphData;\r\n    },\r\n    formatNumber(num) {\r\n      let millions = Math.floor(num / 1000000);\r\n      let thousands = Math.floor(num / 1000) % 1000;\r\n      let remainder = num % 1000;\r\n      let zeros = \"\";\r\n      let zeros2 = \"\";\r\n      if (thousands < 100)\r\n          zeros2 += \"0\"\r\n      if (thousands < 10)\r\n          zeros2 += \"0\"\r\n      if (remainder < 100)\r\n          zeros += \"0\"\r\n      if (remainder < 10)\r\n          zeros += \"0\"\r\n      if (millions > 0)\r\n        return millions + \",\" + zeros2 + thousands + \",\" + zeros + remainder;\r\n      if (thousands > 0) \r\n          return thousands + \",\" + zeros + remainder;\r\n      return remainder;\r\n    },\r\n\r\n    sumTop(type) {\r\n      let sum = 0;\r\n      for (let i = 0; i < this.artistData.topTracks.length; i++) {\r\n        sum += this.artistData.topTracks[i][type];\r\n      }\r\n      return sum / this.artistData.topTracks.length;\r\n    },\r\n    cleanGraphData(bars) {\r\n      let graphData = [];\r\n      for (let i = bars.length - 1; i >= 0; i--) {\r\n        graphData.push({value: bars[i], tag: bars[i]});\r\n      }\r\n      return graphData;\r\n    },\r\n    reverse(arr) {\r\n      let newArr = [];\r\n      for (let i = arr.length - 1; i >= 0; i--) {\r\n        newArr.push(arr[i]);\r\n      }\r\n      return newArr;\r\n    },\r\n    toTrack(id) {\r\n      this.$router.push(\"/songs/\" + id);\r\n    }\r\n  },\r\n  computed: {\r\n    red() {\r\n      return this.color.r;\r\n    },\r\n    green() {\r\n      return this.color.g;\r\n    },\r\n    blue() {\r\n      return this.color.b;\r\n    },\r\n    alpha() {\r\n      return this.color.a;\r\n    },\r\n    topTracksLoaded() {\r\n      if (this.artistData == null) {\r\n        return {tracks: [], valence: 0, energy: 0, danceability: 0};\r\n      }\r\n      return this.artistData.topTracks;\r\n    },\r\n    oldestLiked() {\r\n      let month = this.oldestTracks[0].month;\r\n      let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n      let now = new Date();\r\n      let nowMonth = now.getMonth();\r\n      let year = 0;\r\n      nowMonth -= month;\r\n      nowMonth -= 1;\r\n      while (nowMonth < 0) {\r\n          year += 1;\r\n          nowMonth = 12 + nowMonth;\r\n      } \r\n      let returnYear = (now.getFullYear() - year);\r\n      return months[nowMonth] + \", \" + returnYear;\r\n    },\r\n    inicialized() {\r\n      return this.$store.state.inicialized;\r\n    },\r\n    progress() {\r\n      return this.$store.state.progress;\r\n    },\r\n    notSaved() {\r\n      if (!this.progress.tracks)\r\n        return false;\r\n      if (!(this.$route.params.id in this.$store.state.artists))\r\n        return true;\r\n      return this.$store.state.artists[this.$route.params.id].tracks.length == 0;\r\n    },\r\n    songsSaved() {\r\n      if (this.$route.params.id in this.$store.state.artists) {\r\n        return this.$store.state.artists[this.$route.params.id].tracks.length + \" Songs Liked\";\r\n      }\r\n      return \"\";\r\n    },\r\n    datesAdded() {\r\n      if (!this.savedProcessed)\r\n        return [];\r\n      return this.cleanGraphData(this.artistData.timeline);\r\n    },\r\n    oldestTracks() {\r\n      if (!this.savedProcessed)\r\n        return [];\r\n      return this.artistData.oldest;\r\n    },\r\n    newestTracks() {\r\n      if (!this.savedProcessed)\r\n        return [];\r\n      return this.reverse(this.artistData.newest);\r\n    },\r\n    audioFeatures() {\r\n      return this.$store.state.audioFeatures;\r\n    },\r\n    none() {\r\n      if (this.savedProcessed) {\r\n        if (this.artistData.tracks.length == 0) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    noneTimeline() {\r\n      if (this.savedProcessed) {\r\n        if (this.artistData.timeline.length == 0) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    genresComputed() {\r\n      if (this.artistData != null)\r\n        return this.artistData.genres.slice(0, 10);\r\n      return [];\r\n    },\r\n  },  \r\n  async created() {\r\n    window.scroll({\r\n      top: 0,\r\n      behavior: 'auto'\r\n    });\r\n    if (!this.inicialized)\r\n      this.$router.push(\"/login\");\r\n    // REQUEST Artist Data\r\n    this.retrieveArtistData();\r\n  }\r\n}\r\n/*\r\n\r\n*/\r\n</script>\r\n\r\n<style scoped>\r\n#main {\r\n  --red: 255;\r\n  --green: 255;\r\n  --blue: 255;\r\n  --alpha: 0;\r\n  /* background: rgba(var(--red), var(--green), var(--blue), var(--alpha)); */\r\n}\r\nh1.section-title {\r\n  font-size: 1.3em;\r\n  color: rgba(255, 255, 255, 0.815);\r\n  font-weight: lighter;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.sub-title {\r\n  color: rgba(255, 255, 255, 0.945);\r\n  font-weight: bold;\r\n  font-size: 1.1em;\r\n  margin: 0;\r\n}\r\n\r\np {\r\n  color: rgba(255, 255, 255, 0.534);\r\n  text-align: left;\r\n  margin: 0px 0px;\r\n  line-height: 25px;\r\n}\r\n\r\n.member-active {\r\n  display: block;\r\n  height: 20px;\r\n  width: 20px;\r\n  margin: 0;\r\n  margin-right: 5px;\r\n}\r\n\r\nimg {\r\n  max-width: 300px;\r\n  max-height: 300px;\r\n  margin: 0px 10px;\r\n  border-radius: 5px;\r\n}\r\n\r\n#profile {\r\n  max-width: 300px;\r\n  margin: 0px 10px;\r\n}\r\n\r\n.top-track {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 45px;\r\n}\r\n\r\n.top-track p {\r\n  width: calc(100% - 20px - 45px);\r\n  display: block;\r\n  line-height: 16px;\r\n  height: 16px;\r\n  color: white;\r\n  text-align: left;\r\n  font-weight: lighter;\r\n  color: rgba(255, 255, 255, 0.699);\r\n  margin-left: 16px;\r\n}\r\n\r\n.top-track .index {\r\n  width: 20px;\r\n  color: rgba(255, 255, 255, 0.349);\r\n  text-align: center;\r\n}\r\n\r\n.border {\r\n  height: 100%;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.219);\r\n}\r\n\r\n.bordertop {\r\n  border-top: 1px solid rgba(255, 255, 255, 0.219);\r\n}\r\n\r\n.top-track .track-image {\r\n  display: block;\r\n  width: 45px;\r\n  height: 45px;\r\n  margin: 0;\r\n  background-size: 100% 100%;\r\n  background-position: center center;\r\n  border: 1px solid rgba(0, 0, 0, 0.452);\r\n}\r\n\r\n#topTracksList {\r\n  max-width: 400px;\r\n}\r\n\r\n.featuredtracks {\r\n  --delay: 0;\r\n  animation: slide-up .5s ease calc(var(--delay) * .1s), hide calc(var(--delay) * .1s);\r\n}\r\n.library {\r\n  background-image: url('../../assets/icons/heart.svg');\r\n}\r\n#nosongs {\r\n  margin-bottom: 10px;\r\n  color: rgba(255, 255, 255, 0.336);\r\n  padding: 10px;\r\n  background-color: rgba(7, 7, 7, 0.336);\r\n  border-radius: 10px;\r\n}\r\n.nomargin {\r\n  margin-bottom: 0px;\r\n}\r\n\r\n@media screen and (max-width: 720px) {\r\n  #artist-image {\r\n    width: 70px !important;\r\n    height: 70px !important;\r\n    margin-right: 20px;\r\n  }\r\n\r\n  .fit {\r\n    width: calc(100% - 90px) !important;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 720px) {\r\n  .windows {\r\n    margin-top: 15px;\r\n  }\r\n\r\n  #track-image {\r\n    width: 70px !important;\r\n    height: 70px !important;\r\n    margin-right: 20px;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 1.2em !important;\r\n    \r\n  }\r\n\r\n  h2 {\r\n      font-size: .8em !important;\r\n      margin: 2px !important;\r\n  }\r\n\r\n  h4 {\r\n    font-size: .9em !important;\r\n  }\r\n\r\n}\r\n\r\nh4 {\r\n  margin-bottom: 0px;\r\n  color: rgba(255, 255, 255, 0.336);\r\n  padding: 10px;\r\n  background-color: rgba(7, 7, 7, 0.336);\r\n  border-radius: 10px;\r\n}\r\n\r\n#artist-image {\r\n  display: block;\r\n  width: 100px;\r\n  height: 100px;\r\n  background-size: auto 100%;\r\n  background-position: center center;\r\n  margin-right: 20px;\r\n}\r\n\r\n\r\nh1 {\r\n  font-size: 1.7em;\r\n  display: block;\r\n  color: white;\r\n  text-align: left;\r\n  margin: 0px 0px;\r\n  line-height: 30px;\r\n  display: block;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  margin-top: 3px;\r\n}\r\n\r\nh2 {\r\n  font-size: 1em;\r\n  color: rgba(255, 255, 255, 0.568);\r\n  text-align: left;\r\n  margin: 0;\r\n  margin-top: 10px;\r\n  max-width: calc(100% - 5px);\r\n  text-transform: capitalize;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n}\r\n\r\n.fit {\r\n  display: block;\r\n  width: calc(100% - 120px);\r\n}\r\n\r\n.flex {\r\n  width: 100%;\r\n}\r\n\r\n</style>"]}]}
{"remainingRequest":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\src\\components\\RadialGraphs\\TraitGraph.vue?vue&type=style&index=0&id=76dc878b&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\src\\components\\RadialGraphs\\TraitGraph.vue","mtime":1575333245622},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\andre\\Documents\\GitHub\\Spotify-Features\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLlRyYWl0R3JhcGggew0KICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjI2LCAyMjYsIDIyNiwgMCk7DQp9DQoNCi53cmFwIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBoZWlnaHQ6IDEwMCU7DQp9DQoNCi5jYW52YXNXcmFwIHsNCiAgICBkaXNwbGF5OiBibG9jazsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQp9DQoNCi5jYW52YXN7DQogICAgd2lkdGg6IDEwMCU7DQogICAgbWFyZ2luOiBhdXRvOw0KICAgIGhlaWdodDogMTAwJTsNCiAgICB6LWluZGV4OiAxMDA7DQp9DQoNCg=="},{"version":3,"sources":["TraitGraph.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyLA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"TraitGraph.vue","sourceRoot":"src/components/RadialGraphs","sourcesContent":["<template>\r\n    <div class=\"TraitGraph\">\r\n        <div class=\"canvasWrap\">\r\n            <canvas id=\"trait-graph\" class=\"canvas\"></canvas>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from \"chart.js\";\r\n\r\nexport default {\r\n    name: \"TraitGraph\",\r\n    data() {\r\n        return {\r\n            audioFeatures: {\r\n                valence: {\r\n                    color: 'rgba(242, 142, 43,',\r\n                    title: \"Happiness\",\r\n                },\r\n                energy: {\r\n                    color: 'rgba(89, 161, 79,',\r\n                    title: \"Energy\",\r\n                },\r\n                danceability: {\r\n                    color: 'rgba(78, 121, 167,',\r\n                    title: \"Danceability\",\r\n                },\r\n                banger: {\r\n                    color: 'rgba(225, 87, 89,',\r\n                    title: \"Bangerable\",\r\n                },\r\n            },\r\n            graph: null,\r\n            current: this.current,\r\n            tooltip: null,\r\n        };\r\n    },\r\n    methods: {\r\n        //updating chart to new trend\r\n        renderChart() {\r\n            var options = {\r\n                type: \"radar\",\r\n                data: {\r\n                    labels: ['Happiness', 'Energy', 'Danceability', ['Banger','Level']],\r\n                    datasets: [\r\n                        {\r\n                            label: \"Averages\",\r\n                            data: this.values,\r\n                            borderWidth: 2.5,\r\n                            pointBorderWidth: 0.1,\r\n                            hitRadius: 8,\r\n                            pointRadius: 3.5,\r\n                            pointHoverRadius: 5,\r\n                            borderColor: 'rgba(242, 142, 43,.8)',\r\n                            backgroundColor: 'rgba(242, 142, 43,.4)',\r\n                            lineTension: .5,\r\n                            pointBackgroundColor: 'rgba(242, 142, 43,.8)',\r\n                            borderCapStyle: 'butt',\r\n                            fill: true,\r\n                            pointHoverBorderColor: 'rgb(255,255,255)',\r\n                            pointHoverBackgroundColor: 'rgb(255,255,255)',\r\n                        }\r\n                    ]\r\n                },\r\n                options: {\r\n                    layout: {\r\n                        padding: {\r\n                            left: 0,\r\n                            right: 0,\r\n                            bottom: 0,\r\n                            top: 0,\r\n                        }\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        display: false\r\n                    },\r\n                    tooltips: {\r\n                        displayColors: false,\r\n                        backgroundColor: \"rgba(0, 6, 20, .8)\",\r\n                        titleFontStyle: \"semi-bold\",\r\n                        titleFontFamily: \"'Open sans', sans-serif\",\r\n                        bodyFontFamily: \"'Open sans', sans-serif\",\r\n                        bodyFontColor: \"rgba(255, 255, 255, 0.7)\",\r\n                        xPadding: 10,\r\n                        yPadding: 10,\r\n                        cornerRadius: 0\r\n                    },\r\n                    scale: {\r\n                        pointLabels: {\r\n                            display: true,\r\n                        },\r\n                        angleLines: {\r\n                            display: true,\r\n                            color: 'rgba(200,200,200, .2)',\r\n                            lineWidth: 2,\r\n                        },\r\n                        gridLines: {\r\n                            color: 'rgba(200,200,200, .1)',\r\n                        },\r\n                        ticks: {\r\n                            display: false,\r\n                            max: 100,\r\n                            min: 0,\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            console.log(options);\r\n            var ctx = document\r\n                .getElementById(\"trait-graph\")\r\n                .getContext(\"2d\");\r\n            this.graph = new Chart(ctx, options);\r\n        }\r\n    },\r\n    computed: {\r\n        values() {\r\n            let keys = Object.keys(this.audioFeatures);\r\n            let valueSet = [];\r\n            for (let i = 0; i < keys.length; i++) {\r\n                console.log(keys[i]);\r\n                if (keys[i] == 'tempo') {\r\n                    console.log(\"FOUND TEMPO\");\r\n                    valueSet.push(Math.round(this.audioFeaturesStore[keys[i]].value - 92));\r\n                }\r\n                else if (keys[i] == 'loudness') {\r\n                    valueSet.push(Math.round((1 + this.audioFeaturesStore[keys[i]].value / 50) * 100));\r\n                }\r\n                else {\r\n                    valueSet.push(Math.round(this.audioFeaturesStore[keys[i]].value * 100));\r\n                }\r\n            }\r\n            return valueSet;\r\n        },\r\n        audioFeaturesStore() {\r\n            return this.$store.state.audioFeatures;\r\n        }\r\n    },\r\n    watch: {\r\n        //activate graph tooltip on element hover\r\n        current: function() {\r\n            if (this.tooltip) {\r\n                var activeValues = this.graph.tooltip._active;\r\n                var requestedValues = this.graph.getDatasetMeta(this.tooltip[0])\r\n                    .data[this.tooltip[1]];\r\n                for (var i = 0; i < activeValues.length; i++) {\r\n                    if (requestedValues._index == activeValues[i]._index) {\r\n                        activeValues.splice(i, 1);\r\n                        break;\r\n                    }\r\n                }\r\n                this.graph.tooltip._active = activeValues;\r\n                this.graph.tooltip.update(true);\r\n                this.graph.draw();\r\n                this.tooltip = null;\r\n            }\r\n            var datasetIndex = 0;\r\n            var pointIndex = this.current.value - 1;\r\n            if (this.graph.tooltip._active == undefined)\r\n                this.graph.tooltip._active = [];\r\n            activeValues = this.graph.tooltip._active;\r\n            requestedValues = this.graph.getDatasetMeta(datasetIndex)\r\n                .data[pointIndex];\r\n            activeValues.push(requestedValues);\r\n            this.graph.tooltip._active = activeValues;\r\n            this.graph.tooltip.update(true);\r\n            this.graph.draw();\r\n            this.tooltip = [datasetIndex, pointIndex];\r\n        }\r\n    },\r\n    mounted: function() {\r\n        this.renderChart();\r\n        if (this.active) {\r\n            this.graph.config.data.datasets[0][\"pointBackgroundColor\"][\r\n                this.active - 1\r\n            ] = \"white\";\r\n            this.graph.update();\r\n        }\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.TraitGraph {\r\n    display: block;\r\n    background-color: rgba(226, 226, 226, 0);\r\n}\r\n\r\n.wrap {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.canvasWrap {\r\n    display: block;\r\n    position: relative;\r\n}\r\n\r\n.canvas{\r\n    width: 100%;\r\n    margin: auto;\r\n    height: 100%;\r\n    z-index: 100;\r\n}\r\n\r\n</style>"]}]}
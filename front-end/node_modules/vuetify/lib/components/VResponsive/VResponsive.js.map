{"version":3,"sources":["../../../src/components/VResponsive/VResponsive.ts"],"names":[],"mappings":"AAAA,OAAO,sDAAP,C,CAEA;;AACA,OAAO,UAAP,MAAiD,yBAAjD,C,CAKA;;AACA,OAAO,MAAP,MAAmB,mBAAnB;AACA,SAAS,aAAT,QAA8B,oBAA9B;AAEA;;AACA,eAAe,MAAM,CAAC,UAAD,CAAN,CAAmB,MAAnB,CAA0B;AACvC,EAAA,IAAI,EAAE,cADiC;AAGvC,EAAA,KAAK,EAAE;AACL,IAAA,WAAW,EAAE,CAAC,MAAD,EAAS,MAAT;AADR,GAHgC;AAOvC,EAAA,QAAQ,EAAE;AACR,IAAA,mBAAmB,GAAA;AACjB,YAAM,WAAW,GAAG,MAAM,CAAC,KAAK,WAAN,CAA1B;AAEA,aAAO,CAAC,KAAK,CAAC,WAAD,CAAN,GAAuB,IAAI,WAA3B,GAA0C,SAAjD;AACD,KALO;;AAMR,IAAA,0BAA0B,GAAA;AACxB,UAAI,KAAK,mBAAL,IAA4B,IAAhC,EAAsC,OAAO,SAAP;AAEtC,aAAO,KAAK,mBAAL,GAA2B,GAAlC;AACD,KAVO;;AAWR,IAAA,kBAAkB,GAAA;AAChB,UAAI,KAAK,0BAAL,IAAmC,IAAvC,EAA6C,OAAO,SAAP;AAE7C,aAAO;AACL,QAAA,SAAS,EAAE,aAAa,CAAC,CAAC,CAAD,GAAK,KAAK,0BAAX,EAAuC,GAAvC;AADnB,OAAP;AAGD,KAjBO;;AAkBR,IAAA,gBAAgB,GAAA;AACd,UAAI,KAAK,0BAAL,IAAmC,IAAvC,EAA6C,OAAO,SAAP;AAE7C,aAAO;AACL,QAAA,UAAU,EAAE,aAAa,CAAC,KAAK,0BAAN,EAAkC,GAAlC;AADpB,OAAP;AAGD;;AAxBO,GAP6B;AAkCvC,EAAA,OAAO,EAAE;AACP,IAAA,UAAU,GAAA;AACR,aAAO,KAAK,cAAL,CAAoB,KAApB,EAA2B;AAChC,QAAA,WAAW,EAAE,qBADmB;AAEhC,QAAA,KAAK,EAAE,KAAK;AAFoB,OAA3B,EAGJ,CACD,KAAK,cAAL,CAAoB,KAApB,EAA2B;AACzB,QAAA,WAAW,EAAE,uBADY;AAEzB,QAAA,KAAK,EAAE,KAAK;AAFa,OAA3B,EAGG,KAAK,MAAL,CAAY,OAHf,CADC,CAHI,CAAP;AASD;;AAXM,GAlC8B;;AAgDvC,EAAA,MAAM,CAAE,CAAF,EAAG;AACP,WAAO,CAAC,CAAC,KAAD,EAAQ;AACd,MAAA,WAAW,EAAE,cADC;AAEd,MAAA,KAAK,EAAE,KAAK,gBAFE;AAGd,MAAA,EAAE,EAAE,KAAK;AAHK,KAAR,EAIL,CACD,KAAK,UAAL,EADC,CAJK,CAAR;AAOD;;AAxDsC,CAA1B,CAAf","sourcesContent":["import './VResponsive.sass'\n\n// Mixins\nimport Measurable, { NumberOrNumberString } from '../../mixins/measurable'\n\n// Types\nimport { VNode } from 'vue'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { convertToUnit } from '../../util/helpers'\n\n/* @vue/component */\nexport default mixins(Measurable).extend({\n  name: 'v-responsive',\n\n  props: {\n    aspectRatio: [String, Number] as NumberOrNumberString,\n  },\n\n  computed: {\n    computedAspectRatio (): number | undefined {\n      const aspectRatio = Number(this.aspectRatio)\n\n      return !isNaN(aspectRatio) ? (1 / aspectRatio) : undefined\n    },\n    computedAspectRatioPercent (): number | undefined {\n      if (this.computedAspectRatio == null) return undefined\n\n      return this.computedAspectRatio * 100\n    },\n    contentAspectStyle (): object | undefined {\n      if (this.computedAspectRatioPercent == null) return undefined\n\n      return {\n        marginTop: convertToUnit(-1 * this.computedAspectRatioPercent, '%'),\n      }\n    },\n    sizerAspectStyle (): object | undefined {\n      if (this.computedAspectRatioPercent == null) return undefined\n\n      return {\n        paddingTop: convertToUnit(this.computedAspectRatioPercent, '%'),\n      }\n    },\n  },\n\n  methods: {\n    genContent (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-responsive__sizer',\n        style: this.sizerAspectStyle,\n      }, [\n        this.$createElement('div', {\n          staticClass: 'v-responsive__content',\n          style: this.contentAspectStyle,\n        }, this.$slots.default),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-responsive',\n      style: this.measurableStyles,\n      on: this.$listeners,\n    }, [\n      this.genContent(),\n    ])\n  },\n})\n"],"sourceRoot":"","file":"VResponsive.js"}